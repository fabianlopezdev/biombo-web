---
import PillButton from '@/components/shared/PillButton.astro'
import type { FormField } from '@/lib/sanity/schemas/contactPageSchema'

interface Props {
  formSection?: {
    formTitle?: string
    formFields?: FormField[]
    submitButtonText?: string
  } | null
}

const { formSection } = Astro.props
---

<script src="@/scripts/auto-expanding-textarea.ts"></script>
<script src="@/scripts/contact-form-handler.ts"></script>

{
  formSection && formSection.formFields && (
    <div class="contact-form-section">
      <h2 class="form-title">{formSection.formTitle}</h2>
      <form
        class="contact-form"
        method="POST"
        name="contact"
        action="/contact"
        data-netlify="true"
        netlify-honeypot="bot-field"
      >
        <input type="hidden" name="form-name" value="contact" />
        <input type="hidden" name="bot-field" style="display:none" />
        <input
          type="hidden"
          name="subject"
          value="New contact from %{formName} - %{submissionId}"
        />

        {formSection.formFields.map((field: FormField) => (
          <div class="form-group" key={field._key}>
            {field.fieldType === 'message' ? (
              <textarea
                id={field.fieldType}
                name={field.fieldType}
                rows="1"
                placeholder={field.placeholder || field.label}
                aria-label={field.label}
                required={field.required}
                class="auto-expand"
              />
            ) : (
              <input
                type={
                  field.fieldType === 'email'
                    ? 'email'
                    : field.fieldType === 'phone'
                      ? 'tel'
                      : 'text'
                }
                id={field.fieldType}
                name={field.fieldType}
                placeholder={field.placeholder || field.label}
                aria-label={field.label}
                required={field.required}
                autocomplete={
                  field.fieldType === 'email'
                    ? 'email'
                    : field.fieldType === 'phone'
                      ? 'tel'
                      : field.fieldType === 'name'
                        ? 'name'
                        : 'off'
                }
              />
            )}
          </div>
        ))}

        <PillButton
          text={formSection.submitButtonText}
          type="submit"
          style="padding-block: 0.69rem;"
        />
      </form>
    </div>
  )
}

<style>
  .contact-form-section {
    margin-top: 3.75rem;
  }

  .form-title {
    font-size: inherit;
    margin-bottom: 2.5rem;
    font-weight: inherit;
  }

  :global(.form-message) {
    padding: 1rem 1.5rem;
    margin-top: 1.875rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    transition: opacity 0.3s ease;
  }

  :global(.form-message--success) {
    background-color: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  :global(.form-message--error) {
    background-color: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .contact-form {
    font-size: clamp(1.125rem, 0.995rem + 0.534vi, 1.5rem);
  }

  .form-group {
    margin-bottom: 1.875rem;
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    border: none;
    border-bottom: 1px solid var(--color-secondary);
    background: var(--color-bg);
    font-family: inherit;
    color: inherit;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    padding-bottom: 2.125rem;
  }

  /* Remove default placeholder opacity and set color */
  .form-group input::placeholder,
  .form-group textarea::placeholder {
    opacity: 1;
    color: inherit;
  }

  /* Firefox specific */
  .form-group input::-moz-placeholder,
  .form-group textarea::-moz-placeholder {
    opacity: 1;
    color: inherit;
  }

  /* Webkit browsers (Chrome, Safari, Edge) */
  .form-group input::-webkit-input-placeholder,
  .form-group textarea::-webkit-input-placeholder {
    opacity: 1;
    color: inherit;
  }

  /* IE/Edge specific */
  .form-group input:-ms-input-placeholder,
  .form-group textarea:-ms-input-placeholder {
    opacity: 1;
    color: inherit;
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--color-text);
  }

  /* Change placeholder color to gray on focus */
  .form-group input:focus::placeholder,
  .form-group textarea:focus::placeholder {
    color: #888;
    opacity: 1;
  }

  /* Firefox specific - focus state */
  .form-group input:focus::-moz-placeholder,
  .form-group textarea:focus::-moz-placeholder {
    color: #888;
    opacity: 1;
  }

  /* Webkit browsers - focus state */
  .form-group input:focus::-webkit-input-placeholder,
  .form-group textarea:focus::-webkit-input-placeholder {
    color: #888;
    opacity: 1;
  }

  /* IE/Edge specific - focus state */
  .form-group input:focus:-ms-input-placeholder,
  .form-group textarea:focus:-ms-input-placeholder {
    color: #888;
    opacity: 1;
  }

  .form-group textarea {
    resize: none; /* Disable manual resize since we're auto-expanding */
    min-height: 1.5rem; /* Match single line input height */
    max-height: 200px; /* Limit maximum expansion */
    overflow-y: auto; /* Add scroll if content exceeds max-height */
    overflow-x: hidden; /* Prevent horizontal scroll */
    word-wrap: break-word; /* Break long words */
    word-break: break-word; /* Alternative for better browser support */
    white-space: pre-wrap; /* Preserve whitespace but wrap text */
    field-sizing: content; /* Modern CSS for auto-sizing (Chrome 123+) */
  }

  /* Fallback for browsers without field-sizing support */
  @supports not (field-sizing: content) {
    .form-group textarea.auto-expand {
      overflow-y: hidden; /* Hide scrollbar during expansion */
    }
  }

  @media (max-width: 768px) {
    .contact-form-section {
      margin-top: 2rem;
    }

    .form-title {
      font-size: 1.5rem;
    }
  }

  @media (max-width: 992px) {
    .contact-form-section {
      margin-inline: calc(var(--padding-inline) * -1);
    }

    .form-title {
      padding-inline: var(--padding-inline);
    }

    .contact-form {
      padding-inline: 0;
    }

    .form-group {
      padding-inline: 0; /* No padding on container */
      margin-inline: 0;
      position: relative;
    }

    /* Create full-width border using pseudo-element */
    .form-group::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: var(--color-secondary);
    }

    /* Remove border from inputs and add padding to the input itself */
    .form-group input,
    .form-group textarea {
      border-bottom: none;
      padding-inline: var(--padding-inline);
    }

    /* PillButton container needs padding too */
    .contact-form > :global(.pill-button) {
      margin-inline: var(--padding-inline);
    }
  }
</style>
