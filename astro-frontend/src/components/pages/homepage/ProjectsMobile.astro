---
import type { FeaturedProjectItem } from '@/shared/schemas/sanity/homePageSchema'
import { transformProject } from '@/utils/pages/homepage/projectsUtils'
import ProjectCard from './ProjectCard.astro'

// This interface reflects that Sanity/astro-sanity likely resolves localeStrings to simple strings by the time they reach the component.
export interface ResolvedProjectsSectionData {
  _type?: string
  title?: string
  subtitle?: string
  viewProjectText?: string
  viewAllText?: string
  featuredProjects?: FeaturedProjectItem[]
  clients?: string
}

interface Props {
  projectsData?: ResolvedProjectsSectionData | null
  locale?: 'ca' | 'es' | 'en'
}

const { projectsData, locale = (Astro.currentLocale as 'ca' | 'es' | 'en') || 'ca' } = Astro.props
const currentLang = locale

const subtitle = projectsData?.subtitle || ''
const viewProjectTextVal = projectsData?.viewProjectText || ''
const viewAllTextVal = projectsData?.viewAllText || ''
const rawFeaturedProjects: FeaturedProjectItem[] = projectsData?.featuredProjects || []
---

<div class="projects-container-mobile" aria-labelledby="projects-heading-mobile">
  <h2 class="projects-subtitle">{subtitle.toUpperCase()}</h2>

  <div class="projects-slider-container">
    <div class="projects-slider">
      {
        rawFeaturedProjects.slice(0, 6).map((rawItem, i) => {
          const project = transformProject(rawItem || null, i, currentLang, viewProjectTextVal)
          const projectNumber = i + 1

          return (
            <ProjectCard
              slug={project.slug}
              projectNumber={projectNumber}
              hoverColor={project.hoverColor}
              textHoverColor={project.textHoverColor}
              image={project.image}
              alt={project.alt}
              title={project.title}
              clients={project.clients}
              loading={i < 2 ? 'eager' : 'lazy'}
            />
          )
        })
      }
    </div>
  </div>

  <a href="/projects" class="projects-view-all-mobile" aria-label={viewAllTextVal}>
    {viewAllTextVal}
  </a>
</div>

<style>
  .projects-container-mobile {
    padding-inline: var(--padding-inline);
    padding-block-end: var(--padding-block);
    width: 100%;
  }

  .projects-slider-container {
    padding-block-start: 2rem;
    position: relative;
    width: calc(100% + 2 * var(--padding-inline));
  }

  .projects-slider {
    display: flex;
    gap: 1.25rem;
    overflow-x: auto;
    overflow-y: hidden;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    overscroll-behavior-x: contain;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    -ms-overflow-style: none;
    padding-inline: var(--padding-inline);
    padding-bottom: 1rem;
  }

  .projects-slider::-webkit-scrollbar {
    display: none;
  }

  .projects-slider::after {
    content: '';
    flex: 0 0 var(--padding-inline);
    pointer-events: none;
  }

  .projects-view-all-mobile {
    display: inline-block;
    align-self: center;
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
    color: inherit;
    text-wrap: nowrap;
    padding-block-start: 3rem;
  }

  @media (width < 992px) {
    .projects-subtitle {
      font-size: 1.25rem;
      font-weight: var(--font-weight-light);
    }
  }
</style>
