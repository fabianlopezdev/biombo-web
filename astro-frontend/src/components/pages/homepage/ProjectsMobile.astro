---
import type {
  FeaturedProjectItem,
} from '@/shared/schemas/sanity/homePageSchema'
import { transformProject } from '@/utils/pages/homepage/projectsUtils'

// This interface reflects that Sanity/astro-sanity likely resolves localeStrings to simple strings by the time they reach the component.
export interface ResolvedProjectsSectionData {
  _type?: string
  title?: string
  subtitle?: string
  viewProjectText?: string
  viewAllText?: string
  featuredProjects?: FeaturedProjectItem[]
}

interface Props {
  projectsData?: ResolvedProjectsSectionData | null
  locale?: 'ca' | 'es' | 'en'
}

const { projectsData, locale = (Astro.currentLocale as 'ca' | 'es' | 'en') || 'ca' } = Astro.props
const currentLang = locale

const subtitle = projectsData?.subtitle || ''
const viewProjectTextVal = projectsData?.viewProjectText || ''
const viewAllTextVal = projectsData?.viewAllText || ''
const rawFeaturedProjects: FeaturedProjectItem[] = projectsData?.featuredProjects || []
---

<div class="projects-container-mobile" aria-labelledby="projects-heading-mobile">
  <p class="projects-subtitle">{subtitle.toUpperCase()}</p>

  <div class="projects-grid">
    {
      rawFeaturedProjects.slice(0, 6).map((rawItem, i) => {
        const project = transformProject(rawItem || null, i, currentLang, viewProjectTextVal)
        const projectNumber = i + 1

        return project.image ? (
          <a 
            href={project.slug ? `/project/${project.slug}` : '#'} 
            class={`project-mobile project-mobile-${projectNumber}`}
            style={`--hover-bg-color: ${project.hoverColor || 'transparent'}; --hover-text-color: ${project.textHoverColor || 'inherit'};`}
          >
            <div class="project-image-wrapper">
              <img
                src={project.image}
                alt={project.alt || project.title || `Project ${projectNumber}`}
                class="project-image"
                loading={i < 2 ? 'eager' : 'lazy'}
              />
            </div>
            <div class="project-info">
              <h3 class="project-title">{project.title || `Project ${projectNumber}`}</h3>
              <span class="view-project-text">{viewProjectTextVal}</span>
            </div>
          </a>
        ) : null
      })
    }
  </div>

  <a href="/projects" class="projects-view-all-mobile" aria-label={viewAllTextVal}>
    {viewAllTextVal}
  </a>
</div>

<style>
  .projects-container-mobile {
    padding-inline: var(--padding-inline);
    width: 100%;
    min-height: 100vh;
  }



  .projects-grid {
    padding-block-start: 2rem;
    display: grid;
    grid-template-columns: 1fr;
    gap: 2rem;
  }

  .project-mobile {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    text-decoration: none;
    color: inherit;
    transition: transform 0.3s ease;
  }

  .project-mobile:active {
    transform: scale(0.98);
  }

  .project-image-wrapper {
    width: 72%;
    aspect-ratio: 282 / 384.9;
    border-radius: 0.75rem;
    overflow: hidden;
    background-color: var(--hover-bg-color);
  }

  .project-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .project-info {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    padding: 0 0.5rem;
  }

  .project-title {
    font-size: 1.25rem;
    font-weight: var(--font-weight-semibold);
  }

  .view-project-text {
    font-size: 0.875rem;
    opacity: 0.7;
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
  }

  .projects-view-all-mobile {
    display: inline-block;
    align-self: center;
    margin-top: 2rem;
    padding: 1rem 2rem;
    border: 1px solid currentColor;
    border-radius: 2rem;
    text-decoration: none;
    color: inherit;
    transition: all 0.3s ease;
    font-weight: var(--font-weight-medium);
  }

  .projects-view-all-mobile:active {
    transform: scale(0.95);
    background-color: rgba(0, 0, 0, 0.05);
  }

  /* Tablet layout */
  @media (min-width: 481px) and (max-width: 768px) {
    .projects-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
    }
  }

  /* Small tablets / large phones in landscape */
  @media (min-width: 481px) and (max-width: 600px) and (orientation: landscape) {
    .projects-grid {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .project-image-wrapper {
      aspect-ratio: 16 / 12;
    }
  }
</style>