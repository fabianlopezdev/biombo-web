---
// Component: src/components/pages/homepage/About.astro
// Fetches and renders the About section data from Sanity CMS.

// Sanity data fetching and types
import { fetchHomePageByLocale } from '@/shared/lib/sanity/queries/homePageQueries'
import type { SanityImage as SanityImageType } from '@/shared/schemas/sanity/homePageSchema'
import { toHTML, type PortableTextComponents } from '@portabletext/to-html'

// Astro components
import { Image } from 'astro:assets'

// Define props interface to accept section data from parent component
interface Props {
  sectionData?: any // Using any for flexibility between different sources
}

const { sectionData } = Astro.props

// Define locale for both fetching and debugging purposes
const currentLocale = (Astro.currentLocale || 'ca') as 'ca' | 'es' | 'en'

// If no sectionData is provided, fetch homepage data for the current locale
let aboutSection = sectionData
if (!aboutSection) {
  const homePageData = await fetchHomePageByLocale(currentLocale)
  aboutSection = homePageData?.about
}

// Prepare portable text HTML if data is available
let descriptionHtml = ''
if (aboutSection?.description) {
  // Define custom rendering components for Portable Text
  const customPortableTextComponents: Partial<PortableTextComponents> = {
    block: {
      // This targets standard paragraph blocks from Sanity (style: 'normal')
      normal: ({ children }): string => {
        // Instead of wrapping children in a <p>, return them directly.
        // 'children' here will be the string of HTML for the block's content
        // (e.g., "Some text <strong>bold</strong> and <em>italic</em>.")
        return children || ''
      },
      // If you use other block styles like h1, h2, blockquote in this specific
      // 'description' field and want to customize them, we can add them here.
      // Otherwise, they'll use default rendering (e.g. <h1>, <h2>, <blockquote>).
    },
    // Default rendering for marks (bold, italic, links) is usually sufficient.
    // If specific classes or attributes were needed for links, we could add:
    // marks: {
    //   link: ({children, value}) => `<a href="${value.href}" class="my-custom-link">${children}</a>`
    // }
  }
  // Ensure description is treated as PortableTextBlock[] for toHTML
  descriptionHtml = toHTML(aboutSection.description as any, {
    components: customPortableTextComponents,
  })
}

// Define a more specific type for images to be displayed, extending SanityImageType if needed.
interface DisplayImage extends SanityImageType {}
const imagesToDisplay: DisplayImage[] = aboutSection?.images
  ? aboutSection.images.map((img) => img as DisplayImage)
  : []
---

{/* Only render the section if 'aboutSection' data is available */}
{
  aboutSection && (
    <div class="about">
      {/* Text column */}
      <div class="about__text">
        <h2 class="about__title">{aboutSection.title.toUpperCase()}</h2>
        <p class="about__copy" set:html={descriptionHtml} />
      </div>

      {/* Gallery + progress bar */}
      <div class="about__gallery">
        <div class="slider" data-slider>
          {imagesToDisplay.map((image: DisplayImage, index: number) => (
            <Image
              src={image.asset.url}
              alt={`Image for ${aboutSection.title} - ${index + 1}`}
              class="slider__img"
              width={image.asset.metadata?.dimensions.width ?? 600}
              height={image.asset.metadata?.dimensions.height ?? 800}
              densities={[1, 1.5, 2]}
              format="webp"
              quality={80}
              loading="lazy"
            />
          ))}
        </div>

        <progress
          class="slider__progress"
          max="100"
          value="0"
          aria-label="Galeria: progrés de desplaçament"
        />
      </div>
    </div>
  )
}

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Query for the slider and progress bar within the current component instance
    // This is important if multiple instances of this component could exist on a page,
    // though for a homepage 'About' section, it's likely unique.
    const aboutSectionComponent = document.querySelector('.about') // Assuming .about is unique to this rendered section
    if (!aboutSectionComponent) return

    const slider = aboutSectionComponent.querySelector('[data-slider]')
    const progress = aboutSectionComponent.querySelector('.slider__progress')

    if (!slider || !progress) return

    function updateProgress() {
      const max = slider.scrollWidth - slider.clientWidth
      const pct = max ? (slider.scrollLeft / max) * 100 : 0
      progress.style.setProperty('--p', pct + '%') // drives the CSS fill
      progress.value = pct // keeps native semantics
    }

    slider.addEventListener('scroll', updateProgress)
    window.addEventListener('resize', updateProgress)
    window.addEventListener('load', updateProgress) // initial paint

    // Ensure progress is updated if images load and change scrollWidth
    // This might require a more robust solution like ResizeObserver on the slider
    // or listening to load events on images if lazy loading affects initial calculation.
  })
</script>

<style>
  /* ---------- Layout --------------------------------------------------- */
  .about {
    display: grid;
    grid-template-columns: clamp(18rem, 35vw, 40rem) 1fr;
    gap: 4.4375rem;
    height: 100dvh;
    padding-block: var(--padding-block-desktop);
    padding-inline: var(--padding-inline-desktop);
    background-color: var(--color-secondary);
    color: var(--color-primary);
  }

  .about__title {
    font-size: var(--font-size);
    font-weight: var(--font-weight-light);
    margin-block-end: 7.8125rem;
  }

  .about__copy {
    font-size: var(--font-size-homepage-sections);
    font-weight: var(--font-weight-light);
    max-width: 33.1875rem;
    line-height: 1.184;
  }

  /* ---------- Gallery -------------------------------------------------- */
  .about__gallery {
    --slider-space: 1.981875rem;
    display: flex;
    flex-direction: column;
    gap: var(--slider-space);
  }

  .slider {
    display: flex;
    gap: var(--slider-space);
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    overscroll-behavior-x: contain;
    -webkit-overflow-scrolling: touch;
  }

  /* Trailing spacer so the last slide can snap flush left */
  .slider::after {
    content: '';
    flex: 0 0 calc(100% - var(--slider-space)); /* fills out to container width */
  }

  .slider__img {
    flex: 0 0 auto;
    width: 29.455625rem;
    height: 39.81625rem; /* explicit height keeps ratio */
    object-fit: cover;
    border-radius: 0.621875rem;
    scroll-snap-align: start;
  }

  @media (prefers-reduced-motion: no-preference) {
    .slider {
      scroll-behavior: smooth;
    }
  }

  /* ---------- Progress bar -------------------------------------------- */
  .slider__progress {
    --p: 0%; /* filled amount, set by JS */
    inline-size: 47.625rem;
    block-size: 1.6875rem;
    appearance: none; /* remove native look */
    border: 1px solid var(--color-primary);
    border-radius: 9999px;
    background-color: var(--color-primary-a10);
    position: relative;
    overflow: hidden; /* clip the fill */
  }

  .slider__progress::before {
    /* the actual “fill” */
    content: '';
    position: absolute;
    inset: 0;
    width: var(--p);
    background: var(--color-primary);
    border-radius: inherit;
    transition: width 0.15s ease-out;
  }
</style>
