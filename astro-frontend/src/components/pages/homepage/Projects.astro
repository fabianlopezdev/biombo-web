---
import ScrollPill from '@/assets/ScrollPill.astro'
import { Image } from 'astro:assets'
import type {
  ProjectsSection as SanityProjectsSectionType,
  FeaturedProjectItem,
} from '@/shared/schemas/sanity/homePageSchema'

import { transformProject } from '@/utils/pages/homepage/projectsUtils'
import CustomCursor from './CustomCursor.astro'
import ProjectsTitle from './ProjectsTitle.astro'

// This interface reflects that Sanity/astro-sanity likely resolves localeStrings to simple strings by the time they reach the component.
export interface ResolvedProjectsSectionData {
  _type?: SanityProjectsSectionType['_type']
  title?: string
  subtitle?: string
  viewProjectText?: string
  viewAllText?: string
  featuredProjects?: FeaturedProjectItem[] // Assuming FeaturedProjectItem structure remains the same
}

interface Props {
  projectsData?: ResolvedProjectsSectionData | null
  locale?: 'ca' | 'es' | 'en'
}

const { projectsData, locale = (Astro.currentLocale as 'ca' | 'es' | 'en') || 'ca' } = Astro.props
const currentLang = locale

const title = projectsData?.title || ''
const subtitle = projectsData?.subtitle || ''
const viewProjectTextVal = projectsData?.viewProjectText || ''
const viewAllTextVal = projectsData?.viewAllText || ''
const rawFeaturedProjects: FeaturedProjectItem[] = projectsData?.featuredProjects || []
---

<script src="@/scripts/pages/homepage/projects-section/projectsScroll.ts"></script>
<script src="@/scripts/pages/homepage/customCursor.ts"></script>
<script src="@/scripts/pages/homepage/projects-section/projectReveals.ts"></script>

<div class="projects-container" aria-labelledby="projects-heading">
  <ProjectsTitle {title} />
  <p class="bottom-left">{subtitle.toUpperCase()}</p>

  {
    [...Array(6)].map((_, i) => {
      // Debug log before transformation
      const rawItem = rawFeaturedProjects[i] // rawItem is now FeaturedProjectItem | undefined

      const project = transformProject(rawItem || null, i, currentLang, viewProjectTextVal)

      // Add a class for odd/even styling if needed, or handle directly in CSS
      const projectNumber = i + 1
      const directionClass = projectNumber % 2 !== 0 ? 'reveal-from-top' : 'reveal-from-bottom'

      return (
        <figure
          class={`project project-${projectNumber} ${directionClass}`}
          style={`--hover-bg-color: ${project.hoverColor || 'transparent'}; --hover-text-color: ${project.textHoverColor || 'inherit'};`}
        >
          {project.image && (
            <a href={project.slug ? `/project/${project.slug}` : '#'} class="project-link">
              <Image
                src={project.image}
                alt={project.alt || project.title || `Project ${projectNumber}`}
                class="project-image"
                loading={i === 0 || i === 1 ? 'eager' : 'lazy'}
                inferSize
              />
              <div class="project-caption">
                <figcaption class="caption-text">
                  {project.title || `Project ${projectNumber}`}
                </figcaption>
              </div>
            </a>
          )}

          <CustomCursor project={project} viewProjectTextVal={viewProjectTextVal} />
        </figure>
      )
    })
  }

  <a href="/projects" class="projects-view-all" aria-label={viewAllTextVal}>
    <div class="label-wrapper">
      <span class="label-main">{viewAllTextVal}</span>
      <span aria-hidden="true" class="label-hover">{viewAllTextVal}</span>
    </div>
  </a>

  <button class="scroll-container">
    <ScrollPill />
  </button>
</div>

<style>
  .projects-container {
    /* ---------- root custom properties ---------- */
    --color-project-1: #f35c77;
    --color-project-2: #ffc904;
    --color-project-3: #63b2d5;
    --color-project-4: #9447ff;
    --color-project-5: #f8931a;
    --color-project-6: #272727;

    --row-top-limit: 9;
    --row-bottom-limit: -5;
    --column-right-limit: -6;

    --column-size-project-1: span 45;
    --row-size-project-1: var(--row-top-limit) / span 45;
    --column-size-project-2: 29 / span 37;
    --row-size-project-2: span 37 / var(--row-bottom-limit);
    --column-size-project-3: 72 / span 37;
    --row-size-project-3: 37 / span 37;
    --column-size-project-4: 122 / span 24;
    --row-size-project-4: var(--row-top-limit) / span 41;
    --column-size-project-5: 115 / span 37;
    --row-size-project-5: span 37 / var(--row-bottom-limit);
    --column-size-project-6: 158 / span 37;
    --row-size-project-6: 31 / span 37;

    --margin-bottom: 0.125rem;
    --cursor-size: 8.5625rem;
    --reveal-offset: 50px; /* Controls how far items translate */

    position: relative;
    width: inherit;
    height: inherit;
    display: grid;
    grid-template-columns: repeat(200, 0.5%);
    grid-template-rows: repeat(100, 1%);
    /* perspective: 1200px; -- Removed as not strictly needed for this 2D animation */
  }

  .project {
    border-radius: 0.75rem;
    position: relative;
    overflow: hidden; /* Important if translated content might peek out before reveal */

    /* Reveal Animation: Common Initial State */
    opacity: 0;
    /* Default transition, can be overridden by specific reveal classes if needed */
    transition:
      opacity 0.7s cubic-bezier(0.215, 0.61, 0.355, 1),
      /* EaseOutCubic */ transform 0.7s cubic-bezier(0.215, 0.61, 0.355, 1);
    will-change: opacity, transform;
  }

  /* Initial positions for alternating reveals */
  .project.reveal-from-top {
    transform: translateY(calc(-1 * var(--reveal-offset)));
  }

  .project.reveal-from-bottom {
    transform: translateY(var(--reveal-offset));
  }

  /* Reveal Animation: Visible State (common for all) */
  .project.is-visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Fallback for reduced motion - just show them */
  .project.is-visible-reduced-motion {
    opacity: 1;
    transform: none;
  }

  /* Staggered Delays for Reveal Animation (applied to .is-visible) */
  .project-1.is-visible {
    transition-delay: 0.05s;
  }
  .project-2.is-visible {
    transition-delay: 0.15s;
  }
  .project-3.is-visible {
    transition-delay: 0.25s;
  }
  .project-4.is-visible {
    transition-delay: 0.1s;
  }
  .project-5.is-visible {
    transition-delay: 0.2s;
  }
  .project-6.is-visible {
    transition-delay: 0.3s;
  }

  .project .project-link {
    display: block;
    width: 100%;
    height: 100%;
    border-radius: inherit;
    overflow: hidden;
    position: relative;
    text-decoration: none;
    color: inherit;

    &:focus-visible .project-caption {
      outline: 0.25rem solid var(--color-secondary);
      outline-offset: -0.25rem;
      border-radius: inherit;
    }

    @media (hover: hover) {
      &:hover {
        cursor: none;
      }
    }

    .project-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .project-caption {
      position: absolute;
      inset: 0;
      /* background will be set by specific project styles */
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      opacity: 0;
      transform: scale(1.05);
      transition:
        opacity 0.5s ease,
        transform 0.5s ease;
      pointer-events: none;
      color: #fff;
      font-size: 2.375rem;
      text-align: center;

      .caption-text {
        color: var(--hover-text-color);
        transform: translateY(50%);
        transition: transform 0.5s ease;
      }
    }

    &:hover .caption-text {
      transform: translateY(0);
    }

    &:is(:hover, :focus) {
      background-color: var(--hover-bg-color);

      .project-caption {
        opacity: 1;
        transform: scale(1);
      }
    }
  }

  .project-1 {
    background: var(--color-project-1);
    grid-column: var(--column-size-project-1);
    grid-row: var(--row-size-project-1);
  }
  .project-1 .project-caption {
    background: var(--color-project-1);
  }

  .project-2 {
    background: var(--color-project-2);
    grid-column: var(--column-size-project-2);
    grid-row: var(--row-size-project-2);
    margin-block-end: var(--margin-bottom);
  }
  .project-2 .project-caption {
    background: var(--color-project-2);
  }

  .project-3 {
    background: var(--color-project-3);
    grid-column: var(--column-size-project-3);
    grid-row: var(--row-size-project-3);
  }
  .project-3 .project-caption {
    background: var(--color-project-3);
  }

  .project-4 {
    background: var(--color-project-4);
    grid-column: var(--column-size-project-4);
    grid-row: var(--row-size-project-4);
  }
  .project-4 .project-caption {
    background: var(--color-project-4);
  }

  .project-5 {
    background: var(--color-project-5);
    grid-column: var(--column-size-project-5);
    grid-row: var(--row-size-project-5);
    margin-block-end: var(--margin-bottom);
  }
  .project-5 .project-caption {
    background: var(--color-project-5);
  }

  .project-6 {
    background: var(--color-project-6);
    grid-column: var(--column-size-project-6);
    grid-row: var(--row-size-project-6);
  }
  .project-6 .project-caption {
    background: var(--color-project-6);
  }

  .projects-view-all {
    grid-row: var(--row-top-limit);
    grid-column: span 9 / var(--column-right-limit);

    .label-main,
    .label-hover {
      display: inline-block;
      text-decoration: underline;
      text-decoration-thickness: 1px;
      text-underline-offset: 2px;
    }
    &:hover .label-main,
    &:focus-within .label-main {
      transform: translateY(-100%);
    }

    &:hover .label-hover,
    &:focus-within .label-hover {
      transform: translateY(0);
    }
  }

  .scroll-container {
    grid-column: span 3 / var(--column-right-limit);
    grid-row: span 4 / var(--row-bottom-limit);
    padding-block-start: 0.125rem;
    padding-inline-start: 0.5rem;
  }

  @media (prefers-reduced-motion: reduce) {
    .project {
      opacity: 1;
      transform: none;
      transition: none;
    }
    .project.reveal-from-top,
    .project.reveal-from-bottom {
      transform: none; /* Reset specific transforms too */
    }
  }
</style>
