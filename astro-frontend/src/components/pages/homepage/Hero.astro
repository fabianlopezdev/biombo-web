---
import HighlightScribble from '@/components/shared/HighlightScribble.astro'
import ScrollPill from '@/components/shared/ScrollPill.astro'
import { splitBoldSegments, splitBoldSegmentsByLine } from '@/helpers/content/parseBoldMarkdown'
import type { HomePage } from '@/lib/sanity/schemas/homePageSchema'

interface Props {
  heroData: HomePage['hero'] | Record<string, never> // HomePage['hero'] is SanityHeroSectionType | null
}

const { heroData } = Astro.props

// Check if the text contains line breaks
const hasLineBreaks = heroData?.heroText?.includes('\n')

// Use the appropriate parsing function
const parsedText = hasLineBreaks ? splitBoldSegmentsByLine(heroData?.heroText) : null

// Fall back to the original parsing for backward compatibility
const {
  before: beforeHighlight,
  bold: highlightedWord,
  after: afterHighlight,
} = !hasLineBreaks ? splitBoldSegments(heroData?.heroText) : { before: '', bold: '', after: '' }

const scrollText = heroData?.scrollText

// Get text alignment from Sanity, default to 'left' for backward compatibility
const textAlignment = heroData?.textAlignment || 'left'
const mobileTextAlignment = heroData?.mobileTextAlignment || 'center'

// Determine scroll indicator position class based on desktop alignment
const scrollPositionClass =
  textAlignment === 'center'
    ? 'bottom-center'
    : textAlignment === 'right'
      ? 'bottom-right'
      : 'bottom-left'
---

<script src="@/scripts/homepage/hero-scroll-indicator.ts"></script>
<script src="@/scripts/animations/text-slide-up-animation.ts"></script>
<script src="@/scripts/homepage/homepage-animation-orchestrator.ts"></script>

<script>
  // Diagnostic script - check hero animation state after 5 seconds
  setTimeout(() => {
    console.log('=== HERO ANIMATION DIAGNOSTIC (5 seconds after load) ===')
    const heroTitle = document.querySelector('[data-slide-up-animation]')

    if (!heroTitle) {
      console.error('[Diagnostic] Hero title element NOT FOUND!')
      return
    }

    console.log('[Diagnostic] Hero title element found:', heroTitle)
    console.log('[Diagnostic] Attributes:')
    console.log('  - data-animation:', heroTitle.getAttribute('data-animation'))
    console.log('  - data-animation-trigger:', heroTitle.getAttribute('data-animation-trigger'))
    console.log('  - data-animation-complete:', heroTitle.getAttribute('data-animation-complete'))
    console.log('  - data-wait-for-trigger:', heroTitle.getAttribute('data-wait-for-trigger'))

    const computedStyle = window.getComputedStyle(heroTitle)
    console.log('[Diagnostic] Computed styles:')
    console.log('  - visibility:', computedStyle.visibility)
    console.log('  - opacity:', computedStyle.opacity)
    console.log('  - display:', computedStyle.display)

    // Check inner lines
    const lines = heroTitle.querySelectorAll('.slide-up-line')
    console.log('[Diagnostic] Number of .slide-up-line elements:', lines.length)

    if (lines.length > 0) {
      const firstLine = lines[0]
      const firstLineInner = firstLine.querySelector('.slide-up-line-inner')
      if (firstLineInner) {
        const lineStyle = window.getComputedStyle(firstLineInner)
        console.log('[Diagnostic] First line inner transform:', lineStyle.transform)
        console.log('[Diagnostic] First line inner visibility:', lineStyle.visibility)
      }
    }

    console.log('=== END DIAGNOSTIC ===')
  }, 5000)
</script>

<div class={`hero-wrapper ${textAlignment}-aligned mobile-${mobileTextAlignment}-aligned`}>
  <h1 data-slide-up-animation data-wait-for-trigger class="hero-title">
    {
      hasLineBreaks && parsedText ? (
        parsedText.lines.map((line, index) => (
          <>
            {line.before}
            {line.bold && (
              <span class="highlight-wrapper">
                <span class="highlight-text">{line.bold}</span>
                <HighlightScribble top="9.8rem" animationDelay="1.5s" />
              </span>
            )}
            {line.after}
            {index < parsedText.lines.length - 1 && <br />}
          </>
        ))
      ) : (
        <>
          {beforeHighlight}
          {highlightedWord && (
            <span class="highlight-wrapper">
              <span class="highlight-text">{highlightedWord}</span>
              <HighlightScribble top="9.8rem" animationDelay="1.5s" />
            </span>
          )}
          {afterHighlight}
        </>
      )
    }
  </h1>
  <button class={`scroll-indicator ${scrollPositionClass} just-desktop`}>
    <ScrollPill />

    <p class="label-wrapper">
      <span class="label-main">{scrollText}</span>
      <span aria-hidden="true" class="label-hover">{scrollText}</span>
    </p>
  </button>
</div>

<style is:global>
  /* Hide animation elements initially to prevent FOUC */
  [data-slide-up-animation]:not([data-animation-complete]) {
    visibility: hidden;
  }

  /* Slide-up text animation styles - global to work with dynamically created elements */
  [data-animation='pending'] {
    visibility: hidden;
  }

  [data-animation='ready'],
  [data-animation='active'],
  [data-animation-complete] {
    visibility: visible;
  }

  /* Line animation styles */
  .slide-up-line {
    display: block !important;
    overflow: hidden !important;
    position: relative !important;
    margin-bottom: -0.14em !important;
    /* Ensure proper text wrapping on mobile */
    word-break: normal !important;
    overflow-wrap: break-word !important;
  }

  .slide-up-line-inner {
    display: inline-block !important;
    transform: translate3d(
      0,
      105%,
      0
    ) !important; /* Slightly more than 100% to ensure full hiding */
    will-change: transform !important;
    padding-bottom: 0.2em !important; /* Space for descenders on the inner element */
  }

  /* Animation triggered state with CSS variables for customization */
  [data-animation='active'] .slide-up-line-inner,
  [data-animation-complete] .slide-up-line-inner {
    transform: translate3d(0, 0, 0) !important;
    transition: transform var(--animation-duration, 1.5s)
      var(--animation-easing, cubic-bezier(0.19, 1, 0.22, 1)) !important;
    transition-delay: var(--animation-delay, 750ms) !important;
  }

  /* Ensure special elements maintain proper sizing within animated lines */
  .slide-up-line .highlight-wrapper,
  .slide-up-line strong,
  .slide-up-line em,
  .slide-up-line a {
    display: inline !important;
    position: relative !important;
  }

  /* Respect reduced motion preference */
  @media (prefers-reduced-motion: reduce) {
    .slide-up-line-inner {
      transform: translate3d(0, 0, 0) !important;
      transition: none !important;
    }
  }
</style>

<style>
  /* Wrapper to maintain consistent layout */
  .hero-wrapper {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    position: relative;
  }

  /* Desktop alignment variations */
  .hero-wrapper.left-aligned {
    align-items: flex-start;
  }

  .hero-wrapper.center-aligned {
    align-items: center;
  }

  .hero-wrapper.right-aligned {
    align-items: flex-end;
  }

  /* Text alignment for desktop */
  .hero-wrapper.left-aligned .hero-title {
    text-align: left;
  }

  .hero-wrapper.center-aligned .hero-title {
    text-align: center;
  }

  .hero-wrapper.right-aligned .hero-title {
    text-align: right;
  }

  h1 {
    font-size: clamp(3rem, 1.047rem + 8.014vi, 8.625rem);
    letter-spacing: -0.04em;
    font-weight: var(--font-weight-semibold);
    line-height: 1.03;
    padding-block-end: 3rem;
    gap: 0.4em;

    .highlight-text {
      position: relative;
      z-index: 2;
    }

    &:hover .highlight-svg {
      scale: 1.05;
    }
  }

  .highlight-wrapper {
    position: relative;
    display: inline-block;
    /* Ensure proper rendering context for nested SVG in Brave */
    transform: translateZ(0);
    -webkit-transform: translateZ(0);
  }

  .scroll-indicator {
    display: flex;
    align-items: center;
    gap: 1.375rem;

    &:hover .label-main,
    &:focus-within .label-main {
      transform: translateY(-100%);
    }

    &:hover .label-hover,
    &:focus-within .label-hover {
      transform: translateY(0);
    }
  }

  @media (width < 1025px) {
    h1 {
      width: 100%;
      padding-block: 7.625rem;
    }
    .scroll-indicator {
      display: none;
    }

    /* Mobile alignment variations */
    .hero-wrapper.mobile-left-aligned {
      align-items: flex-start;
    }

    .hero-wrapper.mobile-center-aligned {
      align-items: center;
    }

    .hero-wrapper.mobile-right-aligned {
      align-items: flex-end;
    }

    /* Override desktop text alignment on mobile */
    .hero-wrapper.mobile-left-aligned .hero-title {
      text-align: left !important;
    }

    .hero-wrapper.mobile-center-aligned .hero-title {
      text-align: center !important;
    }

    .hero-wrapper.mobile-right-aligned .hero-title {
      text-align: right !important;
    }
  }

  @media (width < 390px) {
    h1 {
      font-size: clamp(2.75rem, -0.25rem + 13.333vi, 3rem);
    }
  }
</style>
