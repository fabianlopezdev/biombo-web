---
import { fetchActiveHeader } from '@/shared/lib/sanity/queries/headerQueries'
import type { Header, NavigationItem } from '@/shared/schemas/sanity/headerSchema'

const { locale } = Astro.props

// Fetch the active header
let header: Header | null = null
let fetchError: string | null = null

try {
  header = await fetchActiveHeader()
} catch (error) {
  console.error('Error fetching header:', error)
  fetchError = `Could not load navigation for ${locale}. Please try again later.`
}

// Get navigation items and ensure proper typing
const navigationItems: NavigationItem[] = header?.navigationItems || []
---

<header class="site-header">
  <div class="header-container">
    <div class="logo-container">
      <a href={`/${locale === 'ca' ? '' : locale}`} class="logo-link">
        <span class="logo-text">Biombo</span>
      </a>
    </div>

    {
      fetchError && (
        <div class="error-message" role="alert">
          <p>{fetchError}</p>
        </div>
      )
    }

    {
      !fetchError && (
        <nav class="main-navigation">
          <ul class="nav-list">
            {navigationItems.map((item) => {
              // Log item data for debugging
              console.log(`Navigation item for locale ${locale}:`, {
                key: item._key,
                title: item.title,
                slug: item.slug?.current,
                currentLocaleTitle: item.title?.[locale as keyof typeof item.title],
              })

              // Try to get the title in the current locale, with fallbacks
              // First check if title exists and has the current locale property
              let itemTitle = 'Missing Title'

              if (item.title) {
                // Explicitly try current locale first
                if (typeof item.title[locale] === 'string') {
                  itemTitle = item.title[locale]
                }
                // Then fall back to Catalan if available
                else if (typeof item.title.ca === 'string') {
                  itemTitle = item.title.ca
                }
                // Then try any available locale
                else {
                  const availableTitles = Object.entries(item.title).filter(
                    ([, value]) => typeof value === 'string' && value.trim() !== '',
                  )

                  if (availableTitles.length > 0) {
                    itemTitle = availableTitles[0][1]
                  }
                }
              }

              const itemPath = item.isExternal
                ? item.externalUrl
                : `/${locale === 'ca' ? '' : locale}/${item.slug.current === 'home' ? '' : item.slug.current}`

              return (
                <li class="nav-item">
                  <a
                    href={itemPath}
                    class="nav-link"
                    target={item.isExternal ? '_blank' : undefined}
                    rel={item.isExternal ? 'noopener noreferrer' : undefined}
                  >
                    {itemTitle}
                  </a>
                </li>
              )
            })}
          </ul>
        </nav>
      )
    }

    <div class="language-switcher">
      <ul class="language-list">
        <li class="language-item">
          <a href="/" class={`language-link ${locale === 'ca' ? 'active' : ''}`}>CA</a>
        </li>
        <li class="language-item">
          <a href="/es" class={`language-link ${locale === 'es' ? 'active' : ''}`}>ES</a>
        </li>
        <li class="language-item">
          <a href="/en" class={`language-link ${locale === 'en' ? 'active' : ''}`}>EN</a>
        </li>
      </ul>
    </div>
  </div>
</header>

<style>
  .site-header {
    width: 100%;
    background-color: var(--color-background);
    border-bottom: 1px solid var(--color-border);
    padding: 1rem 0;
  }

  .header-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .logo-container {
    flex: 0 0 auto;
  }

  .logo-link {
    text-decoration: none;
    color: var(--color-text);
    font-weight: 700;
    font-size: 1.5rem;
  }

  .main-navigation {
    flex: 1 1 auto;
    margin: 0 2rem;
  }

  .nav-list {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    justify-content: center;
    gap: 2rem;
  }

  .nav-link {
    text-decoration: none;
    color: var(--color-text);
    font-weight: 500;
    transition: color 0.2s ease;
  }

  .nav-link:hover {
    color: var(--color-primary);
  }

  .language-list {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    gap: 0.5rem;
  }

  .language-link {
    text-decoration: none;
    color: var(--color-text-light);
    font-size: 0.875rem;
    font-weight: 500;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    transition: all 0.2s ease;
  }

  .language-link:hover {
    background-color: var(--color-background-hover);
  }

  .language-link.active {
    color: var(--color-primary);
    font-weight: 700;
  }

  .error-message {
    color: var(--color-error);
    font-size: 0.875rem;
  }

  /* Responsive styles */
  @media (max-width: 768px) {
    .header-container {
      flex-direction: column;
      gap: 1rem;
    }

    .nav-list {
      flex-direction: column;
      align-items: center;
      gap: 1rem;
    }

    .language-list {
      margin-top: 1rem;
    }
  }
</style>
