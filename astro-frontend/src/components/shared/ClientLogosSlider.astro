---
import OptimizedImage from '@/components/shared/OptimizedImage.astro'
import type { Client } from '@/lib/sanity/schemas/clientSchema'

interface Props {
  speed?: 'slow' | 'normal' | 'fast'
  pauseOnHover?: boolean
  clients?: Client[] // Required prop for data passed from parent
}

const { speed = 'normal', pauseOnHover = true, clients: clientsProp } = Astro.props

// Only error if prop was not passed at all (undefined)
// Allow null or empty array (will not render anything)
if (clientsProp === undefined) {
  throw new Error(
    `ClientLogosSlider component: clients prop is required but was not provided. Parent component must fetch and pass clients data.`,
  )
}

const clients: Client[] = clientsProp || []

// Filter out clients without logos
const clientsWithLogos = clients.filter((client) => client.logo?.asset?.url)
console.log('Clients with logos:', clientsWithLogos.length)

// Duplicate the array for seamless infinite scroll
const duplicatedClients = [...clientsWithLogos, ...clientsWithLogos]

// Speed mappings in seconds for one complete scroll
const speedMap = {
  slow: 60,
  normal: 40,
  fast: 20,
}

// Mobile speeds are faster (roughly 50% of desktop speed)
const mobileSpeedMap = {
  slow: 30,
  normal: 20,
  fast: 10,
}

const animationDuration = speedMap[speed]
const mobileAnimationDuration = mobileSpeedMap[speed]
---

{
  clientsWithLogos.length > 0 && (
    <div class="clients-slider-container">
      <div class={`client-logos-slider ${pauseOnHover ? 'pause-on-hover' : ''}`}>
        <div
          class="slider-track"
          style={`--animation-duration: ${animationDuration}s; --mobile-animation-duration: ${mobileAnimationDuration}s; --total-logos: ${clientsWithLogos.length}`}
        >
          {duplicatedClients.map((client) => (
            <div class="logo-item">
              {client.website ? (
                <a
                  href={client.website}
                  target="_blank"
                  rel="noopener noreferrer"
                  aria-label={`Visit ${client.name} website`}
                >
                  <OptimizedImage
                    src={client.logo?.asset?.url}
                    alt={`${client.name} logo`}
                    image={client.logo}
                    width={client.logo?.asset?.metadata?.dimensions?.width ?? 200}
                    height={client.logo?.asset?.metadata?.dimensions?.height ?? 100}
                    loading="lazy"
                  />
                </a>
              ) : (
                <OptimizedImage
                  src={client.logo?.asset?.url}
                  alt={`${client.name} logo`}
                  image={client.logo}
                  width={client.logo?.asset?.metadata?.dimensions?.width ?? 200}
                  height={client.logo?.asset?.metadata?.dimensions?.height ?? 100}
                  loading="lazy"
                />
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

<style>
  .clients-slider-container {
    padding-block-start: clamp(4.063rem, 2.869rem + 4.898vi, 7.5rem);
  }
  .client-logos-slider {
    --logo-gap: clamp(3.875rem, 0.988rem + 11.843vi, 12.188rem);
    position: relative;
    width: calc(100% + 2 * var(--padding-inline));
    overflow: hidden;
    margin-inline: calc(-1 * var(--padding-inline));
  }

  .slider-track {
    display: flex;
    gap: var(--logo-gap);
    animation: scroll var(--animation-duration) linear infinite;
    width: max-content;
    will-change: transform;
  }

  .pause-on-hover .slider-track:hover {
    animation-play-state: paused;
  }

  .logo-item {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 80px;
  }

  .logo-item img {
    max-width: 100%;
    max-height: 100%;
    width: auto;
    height: auto;
    object-fit: contain;
    transition: transform 0.3s ease;
  }

  .logo-item a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }

  .logo-item:hover img {
    transform: scale(1.05);
  }

  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }

  /* Mobile responsiveness - faster animation on smaller screens */
  @media (max-width: 768px) {
    .slider-track {
      animation-duration: var(--mobile-animation-duration);
    }
  }

  /* Reduced motion preference */
  @media (prefers-reduced-motion: reduce) {
    .slider-track {
      animation: none;
      flex-wrap: wrap;
      justify-content: center;
    }
  }
</style>
