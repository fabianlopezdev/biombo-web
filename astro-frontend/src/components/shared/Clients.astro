---
import ClientLogosSlider from '@/components/shared/ClientLogosSlider.astro'
import type { Client } from '@/lib/sanity/schemas/clientSchema'

interface Props {
  clientsData?: {
    title?: string
  } | null
  paddingBlock?: string
  paddingBlockStart?: string
  paddingBlockEnd?: string
  paddingInline?: string
  clients?: Client[] // Required prop for clients data passed from parent
}

const {
  clientsData,
  paddingBlock,
  paddingBlockStart,
  paddingBlockEnd,
  paddingInline,
  clients: clientsProp,
} = Astro.props
const title = clientsData?.title || 'Clients destacats que han confiat en nosaltres'

// If paddingBlock is provided, use it for both start and end
const computedPaddingStart = paddingBlock || paddingBlockStart
const computedPaddingEnd = paddingBlock || paddingBlockEnd

// Only error if prop was not passed at all (undefined)
// Allow null or empty array (will not render anything)
if (clientsProp === undefined) {
  throw new Error(
    `Clients component: clients prop is required but was not provided. Parent component must fetch and pass clients data.`,
  )
}

const clients: Client[] = clientsProp || []
---

<section
  class="clients"
  style={`
  ${computedPaddingStart ? `--padding-block-start: ${computedPaddingStart};` : ''}
  ${computedPaddingEnd ? `--padding-block-end: ${computedPaddingEnd};` : ''}
  ${paddingInline !== undefined ? `--clients-padding-inline: ${paddingInline};` : ''}
`}
>
  <h2 class="hero-big-text-2" data-slide-up-animation>
    {title}
  </h2>

  <ClientLogosSlider speed="normal" pauseOnHover={true} clients={clients} />
</section>

<style>
  .clients {
    padding-block-start: var(--padding-block-start, clamp(4.375rem, 2.639rem + 7.124vi, 9.375rem));
    padding-block-end: var(--padding-block-end, clamp(4.375rem, 2.639rem + 7.124vi, 9.375rem));
    padding-inline: var(--clients-padding-inline, var(--padding-inline));
  }

  .hero-big-text-2 {
    text-wrap: unset;
    padding-inline-end: 2rem;
  }
</style>
