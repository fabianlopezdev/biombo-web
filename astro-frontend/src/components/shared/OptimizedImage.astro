---
import { getBlurHashFromImage, hasBlurHash } from '@/helpers/images/blurHash'
import {
  getSrcSetString,
  RESPONSIVE_WIDTHS,
  SIZES_ATTRIBUTES,
} from '@/helpers/images/imageUrlBuilder'

type ImageContext = 'hero' | 'fullWidth' | 'card' | 'thumbnail' | 'default'

interface Props {
  src: string
  alt: string
  image?: any // Sanity image object with metadata
  class?: string
  loading?: 'lazy' | 'eager'
  style?: string
  id?: string
  'aria-describedby'?: string
  aspectRatio?: number // Optional aspect ratio (width / height)
  imageContext?: ImageContext // Context for responsive image presets
}

const {
  src,
  alt,
  image,
  class: className = '',
  loading = 'lazy',
  style = '',
  id,
  'aria-describedby': ariaDescribedBy,
  aspectRatio,
  imageContext = 'default',
} = Astro.props

// Get LQIP and blur status
const hasBlur = hasBlurHash(image)
const lqip = image ? getBlurHashFromImage(image) : null

// Generate unique ID for this image instance
const imageId = id || `optimized-image-${Math.random().toString(36).substr(2, 9)}`

// Build class list for wrapper (receives className from parent)
const wrapperClass = `optimized-image-wrapper ${className}`

// Build wrapper style with optional aspect ratio
const wrapperStyle = aspectRatio ? `aspect-ratio: ${aspectRatio};` : ''

// Build blur layer style
const blurStyle = lqip
  ? `background-image: url(${lqip}); background-size: cover; background-position: center;`
  : ''

// Image gets the style prop (for things like object-fit, etc)
const imgStyle = style

// Generate responsive srcset and sizes automatically if Sanity image is provided
const srcset = image ? getSrcSetString(image, RESPONSIVE_WIDTHS[imageContext]) : undefined
const sizes = image ? SIZES_ATTRIBUTES[imageContext] : undefined
---

<script src="@/scripts/optimized-image-loader.ts"></script>

<div class={wrapperClass} style={wrapperStyle}>
  {hasBlur && <div class="blur-layer" style={blurStyle} aria-hidden="true" />}
  <img
    id={id}
    src={src}
    srcset={srcset}
    sizes={sizes}
    alt={alt}
    class="optimized-image"
    loading={loading}
    style={imgStyle}
    aria-describedby={ariaDescribedBy}
    data-blur-image={imageId}
  />
</div>

<style is:global>
  /* Wrapper is layout-neutral - takes space exactly like img would */
  .optimized-image-wrapper {
    width: 100%;
    height: 100%;
    position: relative;
    display: block;
    margin: 0;
    padding: 0;
    overflow: hidden;
    pointer-events: none; /* Don't block hover/click events */
  }

  /* When aspect-ratio is set, use auto height to respect it */
  .optimized-image-wrapper[style*='aspect-ratio'] {
    height: auto;
  }

  /* Blur layer sits behind the image */
  .optimized-image-wrapper .blur-layer {
    position: absolute;
    inset: 0;
    z-index: 0;
    pointer-events: none; /* Don't block hover/click events */
    opacity: 1;
    transition: opacity 400ms ease-in-out;
  }

  /* Image fills wrapper and starts transparent */
  .optimized-image-wrapper .optimized-image {
    width: 100%;
    height: 100%;
    display: block;
    position: relative;
    z-index: 1;
    opacity: 0;
    transition: opacity 400ms ease-in-out;
    pointer-events: auto; /* Allow image to receive events */
  }

  /* When loaded, fade in image (blur fades via JS) */
  .optimized-image-wrapper .optimized-image[data-loaded='true'] {
    opacity: 1;
  }
</style>
