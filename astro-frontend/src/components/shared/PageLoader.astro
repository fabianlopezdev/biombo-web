---
import BiomboIntroSVG from '@/assets/biombo-intro-loading.svg?raw'

interface Props {
  isHomepage?: boolean
}

const { isHomepage = false } = Astro.props

// Only show loader on homepage
if (!isHomepage) return null
---

<div id="page-loader" class="page-loader" data-loader-active>
  <!-- SVG Shape that scales -->
  <div class="loader-svg-container">
    <div class="loader-svg" set:html={BiomboIntroSVG} />
  </div>

  <!-- Text elements that don't scale -->
  <div class="loader-text">
    <!-- Gray base text -->
    <div class="text-base">
      <span class="text-biombo">Biombo</span>
      <span class="text-studio">Studio</span>
    </div>
    <!-- White fill overlay -->
    <div class="text-fill">
      <span class="text-biombo">Biombo</span>
      <span class="text-studio">Studio</span>
    </div>
  </div>
</div>

<style>
  /* ==========================================
   * LOADER TOGGLE: Change 'flex' to 'none' to disable loader
   * ========================================== */
  :root {
    --show-loader: flex;
  }

  /* Animation variables for easy tweaking */
  .page-loader {
    display: var(--show-loader); /* Controlled by toggle above */
    /* SVG Animation Variables */
    --svg-scale-duration: 2s;
    --svg-scale-delay: 3.2s; /* Original delay */
    --svg-initial-scale: 0.2416; /* Scale down 1213px to display as 530px (530/1213) */
    --svg-final-scale: 2.6; /* Much less extreme scaling, was 6 */

    /* Text Reveal Animation Variables */
    --text-reveal-duration: 3s; /* Exact duration from Motto */
    --text-reveal-delay: 0s; /* Start immediately like Motto */

    /* Text Diverge Animation Variables */
    --text-diverge-duration: 1s;
    --text-diverge-delay: 3.2s; /* Original delay */
    --text-diverge-distance: 100vw;
    --text-diverge-opacity-start: 1;
    --text-diverge-opacity-end: 0; /* Set to 1 for no fade, 0 for full fade */
    --text-fade-duration-percentage: 60%; /* Fade completes at this % of diverge animation */

    /* Overall timing */
    --loader-total-duration: 4000; /* Original duration */

    /* Easing functions */
    --animation-easing: cubic-bezier(
      0.19,
      1,
      0.22,
      1
    ); /* Original easing for SVG and other animations */
    --text-fill-easing: cubic-bezier(
      0.65,
      0.01,
      0.05,
      0.99
    ); /* Motto's easing ONLY for text fill */

    /* Component styles */
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh; /* Fallback for older browsers */
    height: -webkit-fill-available; /* iOS Safari fix for viewport height */
    height: 100svh; /* Small viewport height (when browser UI is expanded) */
    background-color: var(--color-secondary, #191919);
    z-index: 9999;
    align-items: center;
    justify-content: center;
    pointer-events: all;
    opacity: 1;
    transition: opacity var(--loader-fade-duration) var(--animation-easing);
  }

  .page-loader[data-loader-complete] {
    opacity: 0;
    pointer-events: none;
  }

  /* Dynamic viewport height support for modern browsers */
  @supports (height: 100dvh) {
    .page-loader {
      height: 100dvh; /* Dynamically adjusts to actual viewport */
    }
  }

  /* iOS 26 specific fix for viewport displacement bug */
  @supports (-webkit-touch-callout: none) {
    .page-loader {
      /* Prevent viewport displacement on iOS */
      -webkit-overflow-scrolling: touch;
      transform: translate3d(0, 0, 0); /* Force GPU acceleration */
    }
  }

  .loader-svg-container {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1213px; /* New larger SVG width */
    height: 818px; /* New larger SVG height */
    transform: scale(var(--svg-initial-scale));
    animation: scaleUp var(--svg-scale-duration) var(--animation-easing) var(--svg-scale-delay)
      forwards;
  }

  .loader-svg {
    width: 100%;
    height: 100%;
  }

  .loader-svg :global(svg) {
    width: 100%;
    height: 100%;
    /* Improve rendering quality */
    shape-rendering: geometricPrecision; /* Better precision for scaling */
    /* Removed GPU acceleration properties that might cause rasterization at original size */
    /* Since we're now scaling less dramatically (2.6x vs 6x), we don't need forced GPU */
  }

  .loader-text {
    position: absolute;
    z-index: 2;
    font-size: 1.875rem;
    font-weight: var(--font-weight-bold);
    /* No container animation - words will diverge individually */
  }

  .text-base,
  .text-fill {
    display: flex;
    gap: 0.5rem;
  }

  .text-base {
    color: #8e8e8e; /* Gray base text */
    animation: hideAfterFill 0.1s linear
      calc(var(--text-reveal-duration) + var(--text-reveal-delay)) forwards;
  }

  @keyframes hideAfterFill {
    to {
      opacity: 0;
    }
  }

  .text-fill {
    position: absolute;
    top: 0;
    left: 0;
    color: var(--color-secondary, #191919); /* White text that fills over gray */
    clip-path: inset(0 100% 0 0); /* Hidden initially, will reveal left to right */
    animation:
      revealFromLeft var(--text-reveal-duration) var(--text-fill-easing) var(--text-reveal-delay)
        forwards,
      expandClipPath 0.1s linear calc(var(--text-reveal-duration) + var(--text-reveal-delay))
        forwards;
  }

  /* After fill completes, expand clip-path to full width so words can travel */
  @keyframes expandClipPath {
    to {
      clip-path: inset(0 -100vw 0 -100vw); /* Expand clip area way beyond viewport */
    }
  }

  .text-biombo,
  .text-studio {
    display: inline-block;
  }

  /* Animate Biombo to the left - both layers move together */
  .text-biombo {
    animation: divergeLeft var(--text-diverge-duration) linear var(--text-diverge-delay) forwards;
  }

  /* Animate Studio to the right - both layers move together */
  .text-studio {
    animation: divergeRight var(--text-diverge-duration) linear var(--text-diverge-delay) forwards;
  }

  /* Text reveal animation: wipes from left edge to right */
  @keyframes revealFromLeft {
    0% {
      clip-path: inset(0 100% 0 0); /* Fully hidden */
    }
    100% {
      clip-path: inset(0 0 0 0); /* Fully revealed */
    }
  }

  /* Text diverge animation: smooth movement left with controlled fade timing */
  @keyframes divergeLeft {
    from {
      transform: translateX(0);
      opacity: var(--text-diverge-opacity-start);
    }
    70% {
      /* Stay visible longer - 70% of animation at full opacity */
      transform: translateX(-70vw);
      opacity: var(--text-diverge-opacity-start); /* Still fully visible */
    }
    to {
      transform: translateX(calc(var(--text-diverge-distance) * -1));
      opacity: var(--text-diverge-opacity-end); /* Fade out in the last 30% */
    }
  }

  /* Text diverge animation: smooth movement right with controlled fade timing */
  @keyframes divergeRight {
    from {
      transform: translateX(0);
      opacity: var(--text-diverge-opacity-start);
    }
    70% {
      /* Stay visible longer - 70% of animation at full opacity */
      transform: translateX(70vw);
      opacity: var(--text-diverge-opacity-start); /* Still fully visible */
    }
    to {
      transform: translateX(var(--text-diverge-distance));
      opacity: var(--text-diverge-opacity-end); /* Fade out in the last 30% */
    }
  }

  /* SVG scale animation: grows from initial size to fill viewport */
  @keyframes scaleUp {
    from {
      transform: scale(var(--svg-initial-scale));
    }
    to {
      transform: scale(var(--svg-final-scale));
    }
  }

  /* Hide loader for users who prefer reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .page-loader {
      display: none;
    }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .page-loader {
      /* Override variables for mobile */
      --text-diverge-distance: 300px;
      --svg-initial-scale: 0.241; /* Scale down to show as 293px on mobile (293/1213) */
      --svg-final-scale: 1.7; /* Reduced from 4, proportionally scaled */
      /* Slower animation for mobile to feel less rushed */
      --svg-scale-duration: 2.5s; /* Increased from 2s for smoother mobile experience */
    }

    .loader-text {
      font-size: 20px;
      gap: 0.3rem;
    }

    /* Keep the larger base size, just scale it down more on mobile */
    .loader-svg-container {
      width: 1213px;
      height: 818px;
    }
  }

  /*
   * Aspect-ratio based scaling for vertical screens
   * The SVG base is now 1213×818 (1.48:1) horizontal aspect ratio
   * On vertical screens, we need larger scale values to fill the height
   * All scale values reduced proportionally (divided by ~2.3) for the larger base SVG
   */

  /* Square and slightly tall screens (1:1 to 3:4 aspect ratio) */
  /* Example: iPad Pro 12.9" (1024×1366, exactly 3:4), some tablets */
  @media (max-width: 1100px) and (max-aspect-ratio: 1/1) and (min-aspect-ratio: 3/4) {
    .page-loader {
      --svg-final-scale: 3.5; /* Reduced from 4.3 for less aggressive scaling */
      --svg-scale-duration: 2.8s; /* Longer duration for larger scale changes */
    }
  }

  /* Tall screens (3:4 to 9:16 aspect ratio) */
  /* Example: Most tablets in portrait, some older phones */
  @media (max-width: 1100px) and (max-aspect-ratio: 3/4) and (min-aspect-ratio: 9/16) {
    .page-loader {
      --svg-final-scale: 3.8; /* Reduced from 4.3 for smoother animation */
      --text-diverge-distance: 120vw;
      --svg-scale-duration: 3s; /* 3s for tall screens */
    }
  }

  /* Very tall screens (9:16 to 9:20 aspect ratio) */
  /* Example: iPhone 12/13/14, most modern Android phones */
  @media (max-width: 1100px) and (max-aspect-ratio: 9/16) and (min-aspect-ratio: 9/20) {
    .page-loader {
      --svg-final-scale: 4; /* Reduced from 4.8 to prevent overly fast animation */
      --text-diverge-distance: 140vw;
      --svg-scale-duration: 3.2s; /* Proportionally longer for more scaling */
    }
  }

  /* Extremely tall screens (9:20 or taller) */
  /* Example: iPhone 14 Pro, Samsung S23 Ultra */
  @media (max-width: 1100px) and (max-aspect-ratio: 9/20) {
    .page-loader {
      --svg-final-scale: 4.2; /* Reduced from 5.2 to prevent rushed feeling */
      --text-diverge-distance: 150vw;
      --svg-scale-duration: 3.5s; /* Longest duration for tallest screens */
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const loader = document.getElementById('page-loader')
    if (!loader) return

    /* Animation Timeline:
     * 0s     : Page loads, SVG visible at 530x357px
     * 0.5s   : Text starts revealing
     * 2s     : Text fully revealed
     * 2s     : SVG starts scaling + text starts diverging (simultaneous)
     * 5s     : Animations complete
     * 5s     : Loader starts fading out
     * 5.6s   : Loader removed from DOM
     */

    // Set actual viewport height for iOS Safari compatibility
    const setViewportHeight = () => {
      // Use visualViewport API if available (more accurate on iOS)
      const vh = window.visualViewport ? window.visualViewport.height : window.innerHeight

      // Set CSS custom property for accurate viewport height
      document.documentElement.style.setProperty('--vh', `${vh * 0.01}px`)

      // Apply to loader if it exists
      if (loader && !loader.hasAttribute('data-loader-complete')) {
        loader.style.height = `${vh}px`
      }
    }

    // Initial setting
    setViewportHeight()

    // Update on resize and orientation change
    window.addEventListener('resize', setViewportHeight)
    window.addEventListener('orientationchange', setViewportHeight)

    // Use visualViewport resize event if available (iOS 13+)
    if (window.visualViewport) {
      window.visualViewport.addEventListener('resize', setViewportHeight)
    }

    // iOS-specific: Prevent body scroll while loader is active
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent)
    if (isIOS) {
      document.body.style.position = 'fixed'
      document.body.style.width = '100%'
    }

    // Get the total duration from CSS variable
    const loaderStyles = getComputedStyle(loader)
    const animationDuration = parseInt(loaderStyles.getPropertyValue('--loader-total-duration'))

    // Mark loader as complete after animation
    setTimeout(() => {
      // debugger
      loader.setAttribute('data-loader-complete', '')

      // Emit custom event for orchestrator
      window.dispatchEvent(new CustomEvent('loader:complete'))

      // Restore body scroll on iOS
      if (isIOS) {
        document.body.style.position = ''
        document.body.style.width = ''
      }

      // Remove loader from DOM after fade out
      setTimeout(() => {
        // Clean up event listeners
        window.removeEventListener('resize', setViewportHeight)
        window.removeEventListener('orientationchange', setViewportHeight)
        if (window.visualViewport) {
          window.visualViewport.removeEventListener('resize', setViewportHeight)
        }

        loader.remove()
      }, 600) // Match the opacity transition duration
    }, animationDuration)
  })
</script>
