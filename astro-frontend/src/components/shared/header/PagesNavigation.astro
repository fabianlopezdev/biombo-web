---
import type { NavigationPage } from '@/shared/schemas/sanity/headerSchema'
import { getPageName, getPagePath } from '@/utils/shared/headerHelpers'
import CurrentPageSVG from '@/assets/highlight-word.svg?raw'

interface Props {
  pages: NavigationPage[]
  locale: string
}

// Cast props for proper typing
const { pages, locale } = Astro.props as Props
// Current pathname to determine active link
const currentPath = Astro.url.pathname
---

<nav class="navigation" aria-label="Primary">
  <ul class="nav-list">
    {
      pages.map(function renderPage(page) {
        const pageName = getPageName(page)
        const pagePath = getPagePath(page, locale)
        const isActive = pagePath === currentPath

        return (
          <li class="nav-page">
            <a
              href={pagePath}
              class={`nav-link ${!isActive ? 'sliding-label' : ''}`}
              target={page.isExternal ? '_blank' : undefined}
              rel={page.isExternal ? 'noopener noreferrer' : undefined}
              aria-current={isActive ? 'page' : undefined}
              data-astro-prefetch
            >
              {pageName}
            </a>

            {!isActive && (
              <div class="hover-svg" aria-hidden="true">
                <svg
                  width="164"
                  height="49"
                  viewBox="0 0 164 49"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <use href="#nav-hover-graphic" class="nav-hover-path-instance" />
                </svg>
              </div>
            )}
            {isActive && (
              <div class="active-indicator" aria-hidden="true">
                <div class="reveal-mask">
                  <Fragment set:html={CurrentPageSVG} />
                </div>
              </div>
            )}
          </li>
        )
      })
    }
  </ul>
</nav>

<style>
  /* ------------------------------------------------------------------
     Layout
  ------------------------------------------------------------------ */

  .navigation {
    position: absolute;
    inset-inline-start: 50%;
    transform: translate(-50%);

    .nav-list {
      display: flex;
      gap: 2.625rem;
      margin: 0;
      padding: 0;
      list-style: none;

      .nav-page {
        position: relative;

        /* ----------------------------------------------------------------
           Link & sliding labels
        ---------------------------------------------------------------- */
        .nav-link {
          position: relative;
          z-index: 1;
          color: var(--text-secondary);
          font-size: clamp(1.25rem, 0.726rem + 0.818vi, 1.5rem);
          text-decoration: none;
          transition: color 0.3s ease;
        }

        &:not(:has(.nav-link[aria-current='page'])):hover .label-main,
        &:not(:has(.nav-link[aria-current='page'])):focus-within .label-main {
          transform: translateY(-100%);
        }

        &:not(:has(.nav-link[aria-current='page'])):hover .label-hover,
        &:not(:has(.nav-link[aria-current='page'])):focus-within .label-hover {
          transform: translateY(0);
        }

        /* ----------------------------------------------------------------
           SVG stroke-draw effect
        ---------------------------------------------------------------- */
        .hover-svg {
          position: absolute;
          inset-block-start: 44%;
          inset-inline-start: 50%;
          width: 158px;
          height: 49px;
          transform: translate(-50%, -50%);
          z-index: 3;
          opacity: 0;
          visibility: hidden;
          transition: opacity 0.3s ease;
          pointer-events: none;

          svg {
            width: 100%;
            height: 100%;
            overflow: visible;
          }
        }

        &:not(:has(.nav-link[aria-current='page'])):hover .hover-svg,
        &:not(:has(.nav-link[aria-current='page'])):focus-within .hover-svg {
          opacity: 1;
          visibility: visible;
        }

        &:not(:has(.nav-link[aria-current='page'])):hover .nav-hover-path-instance,
        &:not(:has(.nav-link[aria-current='page'])):focus-within .nav-hover-path-instance {
          --symbol-path-dashoffset: 0;
          --symbol-path-fill: var(--color-primary, #f2f2f2);
        }
      }
    }
  }

  /* ------------------------------------------------------------------
     Global reusable classes
     (kept outside the main nesting scope so they can be reused elsewhere)
  ------------------------------------------------------------------ */

  .nav-hover-path-instance {
    --symbol-path-fill: transparent;
    --symbol-path-stroke: var(--color-primary, #f2f2f2);
    --symbol-path-stroke-width: 1.2;
    --symbol-path-dashoffset: var(--nav-svg-path-length, 1450);

    fill: var(--symbol-path-fill);
    stroke: var(--symbol-path-stroke);
    stroke-width: var(--symbol-path-stroke-width);
    stroke-dasharray: var(--nav-svg-path-length, 1450);
    stroke-dashoffset: var(--symbol-path-dashoffset);
    transition:
      stroke-dashoffset 0.8s cubic-bezier(0.47, 0, 0.745, 0.715) 0.1s,
      fill 0.4s ease 0.1s;
  }

  /* Active page indicator styling */
  .active-indicator {
    position: absolute;
    inset-inline-start: 50%;
    inset-block-start: 38%;
    transform: translateX(-50%);
    margin-top: 0.25rem;
    z-index: 1;
    pointer-events: none;

    .reveal-mask {
      position: relative;
      width: 100%;
      mask-image: linear-gradient(to right, #000 0%, #000);
      -webkit-mask-image: linear-gradient(to right, #000 0%, #000);
      mask-size: 0% 100%;
      -webkit-mask-size: 0% 100%;
      mask-repeat: no-repeat;
      -webkit-mask-repeat: no-repeat;
      animation: reveal 0.5s cubic-bezier(0.33, 0, 0.67, 1) 0.5s forwards;
    }
  }

  @keyframes reveal {
    0% {
      mask-size: 0% 100%;
      -webkit-mask-size: 0% 100%;
    }
    100% {
      mask-size: 100% 100%;
      -webkit-mask-size: 100% 100%;
    }
  }

  @media (width < 1025px) {
    .navigation {
      display: none;
    }
  }
</style>
