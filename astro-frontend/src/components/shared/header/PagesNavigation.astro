---
import type { NavigationPage } from '@/shared/schemas/sanity/headerSchema'
import { getPageName, getPagePath } from '@/utils/shared/headerHelpers'

interface Props {
  pages: NavigationPage[]
  locale: string
}

// Cast props for proper typing
const { pages, locale } = Astro.props as Props
// Current pathname to determine active link
const currentPath = Astro.url.pathname
---

<nav class="navigation" aria-label="Primary">
  <ul class="nav-list">
    {
      pages.map(function renderPage(page) {
        const pageName = getPageName(page, locale)
        const pagePath = getPagePath(page, locale)
        const isActive = pagePath === currentPath

        return (
          <li class="nav-page">
            <a
              href={pagePath}
              class="nav-link sliding-label"
              target={page.isExternal ? '_blank' : undefined}
              rel={page.isExternal ? 'noopener noreferrer' : undefined}
              aria-current={isActive ? 'page' : undefined}
              data-astro-prefetch
            >
              <span class="label-wrapper">
                <span class="label-main">{pageName}</span>
                <span class="label-hover" aria-hidden="true">
                  {pageName}
                </span>
              </span>
            </a>

            <div class="hover-svg" aria-hidden="true">
              <svg width="164" height="49" viewBox="0 0 164 49" xmlns="http://www.w3.org/2000/svg">
                <use href="#nav-hover-graphic" class="nav-hover-path-instance" />
              </svg>
            </div>
          </li>
        )
      })
    }
  </ul>
</nav>

<style>
  /* ------------------------------------------------------------------
     Layout
  ------------------------------------------------------------------ */

  .navigation {
    position: absolute;
    inset-inline-start: 50%;
    transform: translate(-50%);

    .nav-list {
      display: flex;
      gap: 2.625rem;
      margin: 0;
      padding: 0;
      list-style: none;

      .nav-page {
        position: relative;
        padding-block-start: 0.9rem;

        /* ----------------------------------------------------------------
           Link & sliding labels
        ---------------------------------------------------------------- */
        .nav-link {
          position: relative;
          z-index: 1;
          color: var(--text-secondary);
          font-size: var(--font-size-base);
          text-decoration: none;
          transition: color 0.3s ease;
        }

        .label-wrapper {
          display: inline-block;
          position: relative;
          overflow: hidden;

          > span {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            transition: transform 0.55s var(--spring-ease, ease-out);
            will-change: transform;
          }
        }

        .label-main {
          z-index: 2;
        }

        .label-hover {
          position: absolute;
          inset-block-start: 0;
          inset-inline-start: 0;
          transform: translateY(100%);
        }

        &:hover .label-main,
        &:focus-within .label-main {
          transform: translateY(-100%);
        }

        &:hover .label-hover,
        &:focus-within .label-hover {
          transform: translateY(0);
        }

        /* ----------------------------------------------------------------
           SVG stroke-draw effect
        ---------------------------------------------------------------- */
        .hover-svg {
          position: absolute;
          inset-block-start: 50%;
          inset-inline-start: 50%;
          width: 164px;
          height: 49px;
          transform: translate(-50%, -50%);
          z-index: 3;
          opacity: 0;
          visibility: hidden;
          transition: opacity 0.3s ease;
          pointer-events: none;

          svg {
            width: 100%;
            height: 100%;
            overflow: visible;
          }
        }

        &:hover .hover-svg,
        &:focus-within .hover-svg {
          opacity: 1;
          visibility: visible;
        }

        &:hover .nav-hover-path-instance,
        &:focus-within .nav-hover-path-instance {
          --symbol-path-dashoffset: 0;
          --symbol-path-fill: var(--color-primary, #f2f2f2);
        }
      }
    }
  }

  /* ------------------------------------------------------------------
     Global reusable classes
     (kept outside the main nesting scope so they can be reused elsewhere)
  ------------------------------------------------------------------ */

  .sliding-label {
    --spring-ease: linear(
      0,
      0.007,
      0.03 2.1%,
      0.122 4.6%,
      0.243 6.9%,
      0.645 13.7%,
      0.85 18.1%,
      0.926,
      0.987,
      1.032 24.7%,
      1.064 27.1%,
      1.077 28.7%,
      1.088 32.3%,
      1.086 34.3%,
      1.074 37.8%,
      1.033 45.8%,
      1.015 50%,
      1.002 54.7%,
      0.994 59.6%,
      0.992 66.4%,
      0.999 85%,
      1.001
    );
  }

  .nav-hover-path-instance {
    --symbol-path-fill: transparent;
    --symbol-path-stroke: var(--color-primary, #f2f2f2);
    --symbol-path-stroke-width: 1.2;
    --symbol-path-dashoffset: var(--nav-svg-path-length, 1450);

    fill: var(--symbol-path-fill);
    stroke: var(--symbol-path-stroke);
    stroke-width: var(--symbol-path-stroke-width);
    stroke-dasharray: var(--nav-svg-path-length, 1450);
    stroke-dashoffset: var(--symbol-path-dashoffset);
    transition:
      stroke-dashoffset 0.8s cubic-bezier(0.47, 0, 0.745, 0.715) 0.1s,
      fill 0.4s ease 0.1s;
  }
</style>
