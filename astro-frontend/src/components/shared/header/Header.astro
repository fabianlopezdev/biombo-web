---
// Imports ────────────────────────────────────────────────────────────────────
import { fetchHeader } from '@/shared/lib/sanity/queries/headerQueries'
import type { Header, NavigationPage } from '@/shared/schemas/sanity/headerSchema'
import LanguageSwitcher from '@/components/shared/header/LanguageSwitcher.astro'
import HeaderLogo from './HeaderLogo.astro'
import PagesNavigation from './PagesNavigation.astro'
import MobileMenu from './MobileMenu.astro'

const { locale } = Astro.props

/* ─ Helper ───────────────────────────────────────────────────────────────────
   Provides the correct “skip to content” label for the given locale. */
function getSkipLabel(locale: string): string {
  const map: Record<string, string> = {
    ca: 'Ves al contingut',
    es: 'Ves al contenido',
    en: 'Skip to content',
  }
  return map[locale] ?? map.en
}

/* ─ Language data ─ */
const languages = [
  { code: 'ca', short: 'Cat', srSuffix: 'alan', fullName: 'Catalan', path: '/' },
  { code: 'es', short: 'Esp', srSuffix: 'añol', fullName: 'Spanish', path: '/es' },
  { code: 'en', short: 'Eng', srSuffix: 'lish', fullName: 'English', path: '/en' },
] as const

/* ─ Fetch navigation ─ */
let headerData: Header | null = null
let fetchError: string | null = null

try {
  // Pass the current locale to fetch the appropriate language version
  headerData = await fetchHeader(locale)
  console.log('DEBUG: headerData fetched:', JSON.stringify(headerData, null, 2))
} catch (error) {
  console.error(`Error fetching headerData for locale ${locale}:`, error)
  fetchError = `Could not load navigation for ${locale}. Please try again later.`
}

// Get navigation pages from the header data
const pages: NavigationPage[] = fetchError ? [] : headerData?.navigationPages || []
console.log('DEBUG: pages array:', JSON.stringify(pages, null, 2))
---

<!-- Localised skip link -->
<a href="#main" class="skip-to-main">{getSkipLabel(locale)}</a>

<header class="site-header" role="banner">
  <div class="logo-wrapper">
    <HeaderLogo />
  </div>

  {
    fetchError ? (
      <div class="error-message" role="alert">
        <p>{fetchError}</p>
      </div>
    ) : (
      <PagesNavigation pages={pages} locale={locale} />
    )
  }

<div class="desktop">
  <LanguageSwitcher locale={locale} languages={languages} />
</div>

<button class="mobile-menu">
  <p>Menú</p>
</button>
</header>

<MobileMenu pages={pages} locale={locale} languages={languages} />

<style>
  /* Skip-link – visible only when focused */
  .skip-to-main {
    position: fixed;
    top: -9999px;
    left: 0;
    z-index: 9999;
    padding: 0.75rem 1.25rem;
    background-color: var(--color-primary);
    color: var(--color-secondary);
    font-weight: 600;
    text-decoration: none;
    transition: none;
    border-radius: 0 0 0.25rem 0;
    box-shadow: 0 2px 5px rgb(0 0 0 / 0.2);
    opacity: 0;
    pointer-events: none;
  }

  .skip-to-main:focus {
    top: 0;
    opacity: 1;
    pointer-events: auto;
    outline: 2px solid var(--color-accent, #4d4d4d);
    outline-offset: 2px;
  }

  /* Header block */
  .site-header {
    inline-size: 100%;
    block-size: var(--header-height);
    background-color: var(--color-secondary);
    color: var(--color-primary);
    padding-inline: var(--padding-inline);
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-block-start: 0.7rem;
    /* serves as containing block for absolutely-centred nav */
    position: relative;

    /* Mobile overrides using native nesting */
    @media (width < 768px) {
      gap: 1rem;
    }
  }

  .logo-wrapper {
    position: relative;
    z-index: 10000; /* Higher than mobile menu to stay visible */
  }

  .error-message {
    color: red;
    padding: 1rem;
    border: 1px solid red;
  }

  .mobile-menu {
    display: none;
    background: none;
    border: 1px solid var(--color-primary);
    color: var(--color-primary);
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    font-size: 1rem;
    transition: all 0.2s ease;
  }

  .mobile-menu:hover {
    background-color: var(--color-primary);
    color: var(--color-secondary);
  }

  .mobile-menu p {
    margin: 0;
  }

  @media (width < 1110px) {
    .desktop {
      display: none;
    }

   .mobile-menu {
      display: block;
    }
      
  }


</style>

<style is:global>
  /* When mobile menu is open, make the logo white for better contrast */
  body:has(.mobile-menu-overlay.open) .logo-wrapper .logo-link {
    color: #ffffff;
    mix-blend-mode: normal;
  }
</style>
