---
// Imports ────────────────────────────────────────────────────────────────────
import type { Header, NavigationPage } from '@/lib/sanity/schemas/headerSchema'
import LanguageSwitcher from '@/components/shared/header/LanguageSwitcher.astro'
import HeaderLogo from './HeaderLogo.astro'
import PagesNavigation from './PagesNavigation.astro'
import MobileMenu from './MobileMenu.astro'
import { getLanguageSwitcherData, type SupportedLanguage } from '@/helpers/i18n/helpers'

interface Props {
  locale: string
  headerData?: Header | null // Optional prop for data passed from parent
  skipTarget?: string // Optional skip link target (default: #main)
}

const { locale, headerData: headerDataProp, skipTarget = '#main' } = Astro.props

/* ─ Helper ───────────────────────────────────────────────────────────────────
   Provides the correct "skip to content" label for the given locale. */
function getSkipLabel(locale: string): string {
  const map: Record<string, string> = {
    ca: 'Ves al contingut',
    es: 'Ves al contenido',
    en: 'Skip to content',
  }
  return map[locale] ?? map.en
}

/* ─ Language data with dynamic URLs ─ */
const currentPath = Astro.url.pathname
const languageData = getLanguageSwitcherData(currentPath, locale as SupportedLanguage)
const languages = languageData.map((lang) => ({
  code: lang.code as 'ca' | 'es' | 'en',
  short: lang.short,
  srSuffix: lang.srSuffix.replace(/[()]/g, ''), // Remove parentheses
  fullName: lang.fullName,
  path: lang.path,
}))

/* ─ Use header data from prop (must be provided by parent) ─ */
// Only error if prop was not passed at all (undefined)
// Allow null (means data missing in Sanity, will render conditionally)
if (headerDataProp === undefined) {
  throw new Error(
    `Header component: headerData prop is required but was not provided. Parent component must fetch and pass header data.`,
  )
}

const headerData: Header | null = headerDataProp
const fetchError: string | null = null

// Get navigation pages from the header data (empty array if no data)
const pages: NavigationPage[] = headerData?.navigationPages || []
---

<!-- Load hide-on-scroll header behavior -->
<script src="@/scripts/header/hide-header-on-scroll.ts"></script>
<!-- Load accessible smooth scroll for skip link -->
<script src="@/scripts/skip-link-accessible-scroll.ts"></script>

<!-- Localised skip link -->
<a href={skipTarget} class="skip-to-main">{getSkipLabel(locale)}</a>

<header class="site-header" role="banner">
  <div class="logo-wrapper">
    <HeaderLogo locale={locale as SupportedLanguage} />
  </div>

  {
    fetchError ? (
      <div class="error-message" role="alert">
        <p>{fetchError}</p>
      </div>
    ) : (
      <PagesNavigation pages={pages} locale={locale} />
    )
  }

  <div class="desktop">
    <LanguageSwitcher locale={locale} languages={languages} />
  </div>

  <button class="mobile-menu">
    <p>Menú</p>
  </button>
</header>

<MobileMenu pages={pages} locale={locale} languages={languages} />

<style>
  /* Skip-link – visible only when focused */
  .skip-to-main {
    position: fixed;
    top: -9999px;
    left: 0;
    z-index: 9999;
    padding: 0.75rem 1.25rem;
    background-color: var(--color-primary);
    color: var(--color-secondary);
    font-weight: 600;
    text-decoration: none;
    transition: none;
    border-radius: 0 0 0.25rem 0;
    box-shadow: 0 2px 5px rgb(0 0 0 / 0.2);
    opacity: 0;
    pointer-events: none;
  }

  .skip-to-main:focus {
    top: 0;
    opacity: 1;
    pointer-events: auto;
    outline: 2px solid var(--color-accent, #4d4d4d);
    outline-offset: 2px;
  }

  /* Header block */
  .site-header {
    inline-size: 100%;
    block-size: var(--header-height);
    background-color: var(--color-secondary);
    color: var(--color-primary);
    padding-inline: var(--padding-inline);
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding-block-start: 0.7rem;
    /* Fixed positioning for hide-on-scroll behavior */
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    transition:
      transform 0.3s ease-in-out,
      opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1);

    /* Mobile overrides using native nesting */
    @media (width < 768px) {
      gap: 1rem;
    }
  }

  /* Homepage loading state - header initially hidden */
  .site-header.header-loading {
    opacity: 0;
  }

  /* Hide-on-scroll states */
  .site-header.hide-on-scroll {
    will-change: transform;
  }

  .site-header.header-hidden {
    transform: translateY(-100%);
  }

  .site-header.header-visible {
    transform: translateY(0);
  }

  .logo-wrapper {
    position: relative;
    z-index: 10000; /* Higher than mobile menu to stay visible */
  }

  .error-message {
    color: red;
    padding: 1rem;
    border: 1px solid red;
  }

  .mobile-menu {
    font-size: 1.25rem;
    display: none;
    background: none;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .mobile-menu:hover {
    background-color: var(--color-primary);
    color: var(--color-secondary);
  }

  .mobile-menu p {
    margin: 0;
  }

  @media (width < 1024px) {
    .desktop {
      display: none;
    }

    .mobile-menu {
      display: block;
    }
  }
</style>

<style is:global>
  /* When mobile menu is open, make the logo white for better contrast */
  body:has(.mobile-menu-overlay.open) .logo-wrapper .logo-link {
    color: #ffffff;
    mix-blend-mode: normal;
  }
</style>
