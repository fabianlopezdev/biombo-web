---
import type { NavigationPage } from '@/shared/schemas/sanity/headerSchema'
import { getPageName, getPagePath } from '@/utils/shared/headerHelpers'

interface Lang {
  code: 'ca' | 'es' | 'en'
  short: string
  srSuffix: string
  fullName: string
  path: string
}

interface Props {
  pages: NavigationPage[]
  locale: string
  languages: readonly Lang[] | Lang[]
}

const { pages, locale, languages } = Astro.props
const currentPath = Astro.url.pathname
---

<div class="mobile-menu-overlay" id="mobile-menu">
  <div class="mobile-menu-content">
    <div class="menu-header">
      <button class="close-button" aria-label="Close menu">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          <path d="M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>
      </button>
    </div>

    <nav class="mobile-navigation" aria-label="Mobile navigation">
      <ul class="mobile-nav-list">
        {
          pages.map(function renderPage(page) {
            const pageName = getPageName(page)
            const pagePath = getPagePath(page, locale)
            const isActive = pagePath === currentPath

            return (
              <li class="mobile-nav-item">
                <a
                  href={pagePath}
                  class={`mobile-nav-link ${isActive ? 'active' : ''}`}
                  target={page.isExternal ? '_blank' : undefined}
                  rel={page.isExternal ? 'noopener noreferrer' : undefined}
                  aria-current={isActive ? 'page' : undefined}
                  data-astro-prefetch
                >
                  {pageName}
                </a>
                <div class="separator"></div>
              </li>
            )
          })
        }
      </ul>
    </nav>

    <div class="mobile-language-section">
      <div class="language-options">
        {
          languages.map(function renderLang(lang) {
            const isActive = lang.code === locale
            return (
              <a 
                href={lang.path} 
                class={`language-btn ${isActive ? 'active' : ''}`} 
                aria-current={isActive ? 'true' : undefined}
                data-astro-prefetch
              >
                {lang.code === 'ca' ? 'Cat' : lang.code === 'es' ? 'Esp' : 'Eng'}
              </a>
            )
          })
        }
      </div>
    </div>
  </div>
</div>

<style>
  .mobile-menu-overlay {
    position: fixed;
    inset: 0;
    z-index: 9999;
    pointer-events: none;
    overflow: hidden;
  }

  .mobile-menu-overlay.open {
    pointer-events: auto;
  }

  .mobile-menu-content {
    position: absolute;
    inset: 0;
    background-color: #1a1a1a;
    color: #ffffff;
    transform: translateY(-100%);
    transition: transform 0.8s cubic-bezier(0.19, 1, 0.22, 1); /* expo.out easing like hero */
    padding-block: 2rem;
    padding-inline: var(--padding-inline);
    display: flex;
    flex-direction: column;
    overflow-y: auto;
  }

  .mobile-menu-overlay.open .mobile-menu-content {
    transform: translateY(0);
  }

  .menu-header {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    padding-block-end: 2.6875rem;
    opacity: 0;
    transition: opacity 0.6s cubic-bezier(0.19, 1, 0.22, 1);
    transition-delay: 0.2s;
  }

  .mobile-menu-overlay.open .menu-header {
    opacity: 1;
  }

  .close-button {
    background: none;
    border: none;
    color: #ffffff;
    cursor: pointer;
    padding: 0.5rem;
    margin: -0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 0.2s ease;
  }

  .close-button:hover {
    opacity: 0.7;
  }

  .mobile-navigation {
    flex: 1;
  }

  .mobile-nav-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .mobile-nav-item {
    overflow: hidden; /* Hide text until it slides up */
  }

  .separator {
    display: block;
    width: 100%;
    height: 1px;
    background-color: var(--color-primary);
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.8s cubic-bezier(0.19, 1, 0.22, 1);
  }

  .mobile-menu-overlay.open .separator {
    transform: scaleX(1);
  }

  /* Staggered delays for separator lines - same as text */
  .mobile-nav-item:nth-child(1) .separator {
    transition-delay: 0.3s;
  }
  .mobile-nav-item:nth-child(2) .separator {
    transition-delay: 0.4s;
  }
  .mobile-nav-item:nth-child(3) .separator {
    transition-delay: 0.5s;
  }
  .mobile-nav-item:nth-child(4) .separator {
    transition-delay: 0.6s;
  }
  .mobile-nav-item:nth-child(5) .separator {
    transition-delay: 0.7s;
  }
  .mobile-nav-item:nth-child(6) .separator {
    transition-delay: 0.8s;
  }

  .mobile-nav-link {
    text-decoration: none;
    font-size: 3rem;
    font-weight: var(--font-weight-light);
    display: block;
    padding-block: 2.5rem;
    position: relative;
    letter-spacing: -0.02em;
    transform: translateY(100%);
    transition: transform 0.8s cubic-bezier(0.19, 1, 0.22, 1);
  }

  .mobile-menu-overlay.open .mobile-nav-link {
    transform: translateY(0);
  }

  /* Staggered delays for text slide-up - same timing as lines */
  .mobile-nav-item:nth-child(1) .mobile-nav-link {
    transition-delay: 0.3s;
  }
  .mobile-nav-item:nth-child(2) .mobile-nav-link {
    transition-delay: 0.4s;
  }
  .mobile-nav-item:nth-child(3) .mobile-nav-link {
    transition-delay: 0.5s;
  }
  .mobile-nav-item:nth-child(4) .mobile-nav-link {
    transition-delay: 0.6s;
  }
  .mobile-nav-item:nth-child(5) .mobile-nav-link {
    transition-delay: 0.7s;
  }
  .mobile-nav-item:nth-child(6) .mobile-nav-link {
    transition-delay: 0.8s;
  }

  .mobile-nav-link:hover {
    opacity: 0.7;
  }

  .mobile-nav-link.active {
    opacity: 0.5;
  }

  .mobile-language-section {
    margin-top: auto;
    padding-top: 2rem;
    opacity: 0;
    transition: opacity 0.6s cubic-bezier(0.19, 1, 0.22, 1);
    transition-delay: 0.9s;
  }

  .mobile-menu-overlay.open .mobile-language-section {
    opacity: 1;
  }

  .language-options {
    display: flex;
    gap: 1.5rem;
  }

  .language-btn {
    color: #ffffff;
    text-decoration: none;
    font-size: 1.25rem;
    font-weight: 300;
    transition: opacity 0.2s ease;
    position: relative;
    padding: 0.5rem 0;
  }

  .language-btn::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 1px;
    background-color: #ffffff;
    transform: scaleX(0);
    transition: transform 0.2s ease;
  }

  .language-btn:hover::after {
    transform: scaleX(1);
  }

  .language-btn.active {
    opacity: 0.5;
    pointer-events: none;
  }

  .language-btn.active::after {
    transform: scaleX(1);
  }



  @media (prefers-reduced-motion: reduce) {
    .mobile-menu-content,
    .menu-header,
    .mobile-nav-link,
    .mobile-language-section {
      transition: none;
    }
    
    .mobile-menu-overlay.open .menu-header,
    .mobile-menu-overlay.open .mobile-language-section {
      opacity: 1;
    }
    
    .mobile-menu-overlay.open .mobile-nav-link {
      transform: translateY(0);
    }
  }
</style>

<script>
  function initMobileMenu() {
    const menuOverlay = document.getElementById('mobile-menu')
    const menuButton = document.querySelector('.mobile-menu')
    const closeButton = menuOverlay?.querySelector('.close-button')
    const menuContent = menuOverlay?.querySelector('.mobile-menu-content')

    function openMenu() {
      if (menuOverlay) {
        menuOverlay.classList.add('open')
        document.body.style.overflow = 'hidden'
      }
    }

    function closeMenu() {
      if (menuOverlay) {
        menuOverlay.classList.remove('open')
        document.body.style.overflow = ''
      }
    }

    menuButton?.addEventListener('click', openMenu)
    closeButton?.addEventListener('click', closeMenu)
    
    menuOverlay?.addEventListener('click', (e) => {
      if (e.target === menuOverlay) {
        closeMenu()
      }
    })

    menuContent?.addEventListener('click', (e) => {
      e.stopPropagation()
    })

    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && menuOverlay?.classList.contains('open')) {
        closeMenu()
      }
    })
  }

  document.addEventListener('DOMContentLoaded', initMobileMenu)
  document.addEventListener('astro:page-load', initMobileMenu)
</script>