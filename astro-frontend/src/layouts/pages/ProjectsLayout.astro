---
import BaseLayout from '@/layouts/shared/BaseLayout.astro'
import PillButton from '@/components/shared/PillButton.astro'
import ProjectCard from '@/components/shared/ProjectCard.astro'
import { projectsTranslations, getProjectUrl, type Locale } from '@/config/i18n/projects'
import { getPageMetadata } from '@/config/i18n/pageMetadata'
import { getThumbnailMedia } from '@/helpers/projects/projectHelpers'
import type { Project } from '@/lib/sanity/schemas/projectSchema'
import type { Service } from '@/lib/sanity/schemas/serviceSchema'
import type { Client } from '@/lib/sanity/schemas/clientSchema'
import type { ProjectsPage } from '@/lib/sanity/schemas/projectsPageSchema'

interface Props {
  locale: Locale
  projects: Project[] | null
  services: Service[] | null
  projectsPageData?: ProjectsPage | null
}

const { locale, projects, services, projectsPageData } = Astro.props
const t = projectsTranslations[locale]
const metadata = getPageMetadata('projects', locale)

console.log('🌐 [Projects Layout] Locale:', locale)
console.log('📄 [Projects Layout] Projects Page Data:', projectsPageData)
console.log('📄 [Projects Layout] Page Title from Sanity:', projectsPageData?.title)
console.log('📄 [Projects Layout] Fallback Title:', t.pageTitle)

// Use Sanity title if available, otherwise fallback to translations
const pageTitle = projectsPageData?.title || t.pageTitle

// Helper function to get project slug
const getProjectSlug = (slug: { current: string } | string): string => {
  return typeof slug === 'string' ? slug : slug?.current || ''
}
---

<BaseLayout
  pageMetaTitle={metadata.title}
  pageMetaDescription={metadata.description}
  skipTarget="#main"
>
  <main id="main" class="main-content">
    <h1 class="hero-title-internal">{pageTitle}</h1>
    <section
      class="projects-filter-container"
      aria-labelledby="filter-heading"
      data-locale={locale}
      data-filters-active={t.screenReaderAnnouncements?.filtersActive
        ? '{0} filters active, showing {1} projects'
        : '{0} filters active, showing {1} projects'}
      data-all-projects={t.screenReaderAnnouncements?.allProjectsShowing
        ? 'Showing all {0} projects'
        : 'Showing all {0} projects'}
    >
      <h2 id="filter-heading">{t.filterBy}</h2>
      <nav class="projects-nav-filter" aria-label={t.filterAriaLabel}>
        <div class="projects-filter-wrapper">
          <ul class="projects-filter-list">
            {
              services &&
                services.map((service) => (
                  <li>
                    <PillButton
                      text={service.title}
                      data-service={service._id}
                      data-slug={service.slug?.current}
                      class="filter-pill"
                    />
                  </li>
                ))
            }
          </ul>
        </div>
        <button class="delete-filters" type="button" aria-label={t.clearFiltersAriaLabel}>
          {t.clearFilters}
        </button>
      </nav>
    </section>
    <section class="projects-container" aria-label={t.projectListAriaLabel}>
      <ul class="projects-grid-container">
        {
          projects && projects.length > 0 ? (
            projects.map((project) => (
              <li
                class="project-item"
                data-services={
                  (project.services || project.categories)
                    ?.map((s) => {
                      // Handle both dereferenced objects and reference objects
                      return s?._id || ''
                    })
                    .filter(Boolean)
                    .join(',') || ''
                }
              >
                <ProjectCard
                  title={project.title}
                  thumbnailMedia={getThumbnailMedia(project)}
                  slug={getProjectUrl(getProjectSlug(project.slug), locale)}
                  hoverColor={project.hoverColor?.hex || '#63b2d5'}
                  textHoverColor={project.textHoverColor?.hex || '#ffffff'}
                  clients={project.clients?.map((c: Client) => c.name).join(', ') || ''}
                  viewProjectText={t.viewProject}
                  projectId={project._id}
                />
              </li>
            ))
          ) : (
            <li class="no-projects-container">
              <div role="status" aria-live="polite">
                <p class="no-projects">{t.noProjects}</p>
              </div>
            </li>
          )
        }
      </ul>
    </section>
  </main>
</BaseLayout>

<style>
  .main-content {
    margin-block-start: var(--header-height);
    padding-inline: var(--padding-inline);
    padding-block: var(--padding-block);
  }
  #filter-heading {
    padding-inline-end: 0.2rem;
  }
  .projects-filter-container {
    --projects-text-size: clamp(1.125rem, 1.082rem + 0.178vi, 1.25rem);
    padding-block-start: var(--padding-block);
    display: flex;
    align-items: center;
    /* gap: 1.25rem; */
    padding-block-end: clamp(1.625rem, 1.321rem + 1.247vi, 2.5rem);
  }
  h2 {
    font-size: var(--projects-text-size);
    font-weight: var(--font-weight-light);
    flex-shrink: 0;
    white-space: nowrap;
  }

  .projects-nav-filter {
    max-inline-size: 85.3125rem;
    min-width: 0; /* Allow flex item to shrink below content width */
    display: flex;
    align-items: center;
    /* gap: 1.25rem; */
    flex: 1;
    position: relative;
    /* padding-inline-start: 1rem; Slightly more padding to push first pill past the 3% fade */
    mask-image: linear-gradient(to right, transparent 0%, black 3%, black 100%);
    -webkit-mask-image: linear-gradient(to right, transparent 0%, black 3%, black 100%);
  }

  .projects-filter-wrapper {
    flex: 1;
    overflow-x: auto;
    overflow-y: hidden;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    position: relative;
    padding-inline-start: 1.6rem; /* Slightly more padding to push first pill past the 3% fade */
    /* Add mask for right fade only */
    mask-image: linear-gradient(to right, black 0%, black 90%, transparent 100%);
    -webkit-mask-image: linear-gradient(to right, black 0%, black 90%, transparent 100%);
  }

  .projects-filter-wrapper::-webkit-scrollbar {
    display: none;
  }

  .projects-filter-list {
    list-style: none;
    display: flex;
    flex-wrap: nowrap;
    gap: clamp(0.625rem, 0.582rem + 0.178vi, 0.75rem);
    cursor: grab;
    padding-inline-end: 2rem; /* Add padding here instead, on the list itself */
  }

  /* Visual feedback for filter pill clicks */
  .filter-pill {
    transition:
      transform 0.1s ease-out,
      background-color 0.3s ease;
  }

  .filter-pill:active {
    transform: scale(0.99);
  }

  .filter-pill.active {
    background-color: var(--color-secondary);
    color: var(--color-primary);
  }

  .delete-filters {
    font-size: var(--projects-text-size);
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
    position: relative;
    z-index: 2;
    flex-shrink: 0;
    padding-inline-start: 1.5rem; /* Add padding to create space from scrolling pills */
    background: linear-gradient(
      to right,
      transparent 0%,
      var(--color-primary, white) 20%
    ); /* Gradient to blend with fade */
  }

  .projects-grid-container {
    max-width: 85.3125rem;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    /* justify-content: center; */
    /* align-content: center; */
    /* margin-inline: auto; */
    gap: 1.85rem;
  }

  .project-item {
    max-inline-size: 27.148rem;
    aspect-ratio: 3/4;
    /* display: block; Override default list-item display to fix grid layout */
    /* height: clamp(25.375rem, -2.75rem + 41.705vi, 36.688rem); */
  }

  .project-item article {
    height: 100%; /* Pass height to ProjectCard through article element */
  }

  @media (width < 992px) {
    .projects-filter-container {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.125rem;
    }

    .project-item {
      max-inline-size: none;
      aspect-ratio: none;
      height: auto; /* Reset height on mobile to prevent overlap */
    }

    /* On mobile, the nav becomes the scrollable container */
    .projects-nav-filter {
      overflow-x: auto;
      overflow-y: hidden;
      -webkit-overflow-scrolling: touch;
      scrollbar-width: none;
      margin-inline: calc(-1 * var(--padding-inline));
      width: 100vw;
      display: flex;
      align-items: center;
      gap: clamp(0.625rem, 0.582rem + 0.178vi, 0.75rem);
      padding-block: 4px;
    }

    .projects-nav-filter::-webkit-scrollbar {
      display: none;
    }

    /* Reset wrapper styles on mobile */
    .projects-filter-wrapper {
      padding-inline-start: var(--padding-inline);
      overflow: visible;
      flex: none;
      mask-image: none;
      -webkit-mask-image: none;
    }

    .projects-filter-list {
      flex-wrap: nowrap;
      padding-inline-start: var(--padding-inline);
      padding-inline-end: 0; /* Remove the desktop padding */
    }

    .projects-filter-list:active {
      cursor: grabbing;
    }

    /* On mobile, delete button goes at the end */
    .delete-filters {
      margin-inline-start: 0;
      flex-shrink: 0;
      padding-inline-start: 1rem;
      padding-inline-end: var(--padding-inline);
      background: none; /* Remove desktop gradient */
    }

    .projects-filter-list {
      padding-inline-start: 0;
    }

    .projects-grid-container {
      grid-template-columns: minmax(0, 1fr);
      gap: clamp(2.25rem, 2.389rem + -0.57vi, 1.85rem);
    }
  }
</style>

<script src="@/scripts/magnetic-project-cursor.ts"></script>
<script src="@/scripts/project-page-filter-with-url.ts"></script>
<script src="@/scripts/filter-pills-drag-scroll.ts"></script>
