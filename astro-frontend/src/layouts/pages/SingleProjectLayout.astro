---
import BaseLayout from '@/layouts/shared/BaseLayout.astro'
import PillButton from '@/components/shared/PillButton.astro'
import TwoColumnLayout from '@/components/shared/TwoColumnLayout.astro'
import ProjectCard from '@/components/shared/ProjectCard.astro'
import OptimizedImage from '@/components/shared/OptimizedImage.astro'
import OptimizedVideo from '@/components/shared/OptimizedVideo.astro'
import { portableTextToHtml, portableTextToPlainText } from '@/lib/sanity/utils/portableTextToHtml'
import { fetchProjectBySlug, fetchSimilarProjects } from '@/lib/sanity/queries/projectQueries'
import {
  getImageUrl,
  getMediaUrl,
  getImageSectionLayout,
  isImageFile,
  isVideoFile,
  getMainMedia,
  getMobileMainMedia,
  getThumbnailMedia,
  isMainMediaVideo,
} from '@/helpers/projects/projectHelpers'
import { getProjectTranslations } from '@/config/i18n/projectDetail'
import { getProjectsListUrl, type SupportedLocale } from '@/config/routing/projectRoutes'
import { generateProjectMetadata } from '@/config/i18n/pageMetadata'
import type {
  Project,
  ImageWithResolvedAsset,
  FileWithResolvedAsset,
} from '@/lib/sanity/schemas/projectSchema'

interface Props {
  slug: string
  locale: SupportedLocale
}

const { slug, locale } = Astro.props
const translations = getProjectTranslations(locale)

// Fetch the project data
const project = await fetchProjectBySlug(slug, locale)

if (!project) {
  return Astro.redirect('/404')
}

// Fetch similar projects directly from Sanity (optimized - no need to fetch all projects)
const serviceIds = project.services?.map((s) => s._id) || []
const similarProjects = await fetchSimilarProjects(serviceIds, locale, project._id, 4)

// Get the base projects URL for this locale
const projectsBaseUrl = getProjectsListUrl(locale)

// Generate dynamic SEO metadata
const metadata = generateProjectMetadata(project, locale, portableTextToPlainText)
---

<BaseLayout
  pageMetaTitle={metadata.title}
  pageMetaDescription={metadata.description}
  skipTarget="#project-content"
>
  <main id="main" class="main-content">
    <h1 class="hero-title-internal">{project.title}</h1>

    <aside class="client-info mobile" aria-label={translations.clientInfoLabel}>
      <h2 class="section-titles service-clients-font-size">{translations.client}</h2>
      <p class="service-clients-font-size">
        {project.clients?.map((client) => client.name).join(', ') || translations.notAvailable}
      </p>
    </aside>

    <header class="project-header">
      <figure class="hero-figure">
        {
          isMainMediaVideo(project) ? (
            // Video handling - use desktop video only for now (videos stay desktop)
            <OptimizedVideo
              video={getMainMedia(project) as FileWithResolvedAsset}
              class="hero-image"
              aspectRatio={1513 / 722}
            />
          ) : (
            // Image handling with mobile variant support
            (() => {
              const desktopMedia = getMainMedia(project) as ImageWithResolvedAsset
              const mobileMedia = getMobileMainMedia(project) as ImageWithResolvedAsset | null
              const hasMobileVariant = mobileMedia && mobileMedia !== desktopMedia

              return hasMobileVariant ? (
                // Use picture element for responsive images
                <picture>
                  <source media="(min-width: 992px)" srcset={getImageUrl(desktopMedia)} />
                  <source media="(max-width: 991px)" srcset={getImageUrl(mobileMedia)} />
                  <OptimizedImage
                    class="hero-image"
                    src={getImageUrl(desktopMedia)}
                    alt={`${project.title}`}
                    image={desktopMedia}
                    imageContext="hero"
                    loading="eager"
                  />
                </picture>
              ) : (
                // No mobile variant, use desktop only
                <OptimizedImage
                  class="hero-image"
                  src={getImageUrl(desktopMedia)}
                  alt={`${project.title}`}
                  image={desktopMedia}
                  imageContext="hero"
                  loading="eager"
                />
              )
            })()
          )
        }
      </figure>
    </header>

    <article id="project-content" class="project-content">
      <TwoColumnLayout noPaddingHorizontal noFirstColumnPaddingMobile>
        <aside
          slot="first-column"
          class="project-metadata"
          aria-label={translations.projectDetailsLabel}
        >
          <div class="client-section">
            <h2 class="section-titles service-clients-font-size">{translations.client}</h2>
            <p class="padding-bottom service-clients-font-size">
              {
                project.clients?.map((client) => client.name).join(', ') ||
                  translations.notAvailable
              }
            </p>
          </div>
          <div class="services-section">
            <h2 class="section-titles service-clients-font-size">{translations.services}</h2>
            <ul class="services-container">
              {
                project.services?.map((service) => (
                  <li>
                    <PillButton
                      text={service.title}
                      href={`${projectsBaseUrl}?service=${service.slug?.current || service._id}`}
                    />
                  </li>
                ))
              }
            </ul>
          </div>
        </aside>
        <div slot="second-column" class="project-description">
          {
            project.mainText && (
              <div class="project-copy" set:html={portableTextToHtml(project.mainText)} />
            )
          }
        </div>
      </TwoColumnLayout>

      {/* Dynamic content sections */}
      {
        project.contentSections?.map((section, index: number) => {
          const isLastSection = index === (project.contentSections?.length || 0) - 1
          const nextSection =
            !isLastSection && project.contentSections ? project.contentSections[index + 1] : null
          const isBeforeText = nextSection && nextSection._type === 'textBlock'
          const isBeforeImage = nextSection && nextSection._type === 'imageSection'

          if (section._type === 'textBlock') {
            return (
              <div class="content-section standalone-text-section">
                <blockquote
                  class="standalone-text project-copy highlight-quote"
                  set:html={portableTextToHtml(section.text || [])}
                />
              </div>
            )
          }

          if (section._type === 'imageSection') {
            const layout = getImageSectionLayout(section)
            const spacingClass = !isLastSection
              ? isBeforeText
                ? 'before-text'
                : isBeforeImage
                  ? 'before-image'
                  : 'with-spacing'
              : ''

            // Helper to render a single media item (image or video) with mobile variant support
            const renderMediaItem = (
              media: FileWithResolvedAsset | ImageWithResolvedAsset | null | undefined,
              mobileMedia?: FileWithResolvedAsset | ImageWithResolvedAsset | null | undefined,
            ) => {
              if (!media) return null

              const hasMobileVariant = mobileMedia && mobileMedia !== media

              // Handle new file format (can be image or video) or videoWithBackground
              if (
                '_type' in media &&
                (media._type === 'file' || media._type === 'videoWithBackground')
              ) {
                const file = media as FileWithResolvedAsset

                // Check if it's an image by asset._type
                if (isImageFile(file)) {
                  // Convert file to image format for OptimizedImage component
                  const imageData = {
                    _type: 'image' as const,
                    asset: file.asset,
                  }

                  // If we have a mobile variant and it's also an image, use picture element
                  if (hasMobileVariant && isImageFile(mobileMedia as FileWithResolvedAsset)) {
                    const mobileFile = mobileMedia as FileWithResolvedAsset
                    return (
                      <picture>
                        <source media="(min-width: 992px)" srcset={getMediaUrl(file)} />
                        <source media="(max-width: 991px)" srcset={getMediaUrl(mobileFile)} />
                        <OptimizedImage
                          src={getMediaUrl(file)}
                          alt={project.title}
                          image={imageData}
                          loading="lazy"
                        />
                      </picture>
                    )
                  }

                  return (
                    <OptimizedImage
                      src={getMediaUrl(file)}
                      alt={project.title}
                      image={imageData}
                      loading="lazy"
                    />
                  )
                }
                // Check if it's a video by asset._type or mimeType
                else if (isVideoFile(file)) {
                  return <OptimizedVideo video={file} />
                }
              }
              // Handle legacy image format
              else if ('_type' in media && media._type === 'image') {
                const image = media as ImageWithResolvedAsset

                // If we have a mobile variant, use picture element
                if (
                  hasMobileVariant &&
                  '_type' in (mobileMedia as any) &&
                  (mobileMedia as any)._type === 'image'
                ) {
                  const mobileImage = mobileMedia as ImageWithResolvedAsset
                  return (
                    <picture>
                      <source media="(min-width: 992px)" srcset={getImageUrl(image)} />
                      <source media="(max-width: 991px)" srcset={getImageUrl(mobileImage)} />
                      <OptimizedImage
                        src={getImageUrl(image)}
                        alt={project.title}
                        image={image}
                        loading="lazy"
                      />
                    </picture>
                  )
                }

                return (
                  <OptimizedImage
                    src={getImageUrl(image)}
                    alt={project.title}
                    image={image}
                    loading="lazy"
                  />
                )
              }
              return null
            }

            // Get the featured media/image for rendering
            // FeaturedMedia is now an array with max 1 item
            const featuredMedia =
              Array.isArray(section.featuredMedia) && section.featuredMedia.length > 0
                ? section.featuredMedia[0]
                : section.featuredMedia || section.featuredImage

            // Get mobile variants
            const mobileFeaturedMedia =
              Array.isArray(section.mobileFeaturedMedia) && section.mobileFeaturedMedia.length > 0
                ? section.mobileFeaturedMedia[0]
                : section.mobileFeaturedMedia

            const mobileOtherMedia = section.mobileOtherMedia || []

            // 1 media layout - full width
            if (layout.totalMedia === 1) {
              const singleMedia = layout.hasFeatured
                ? featuredMedia
                : layout.otherMedia[0] || layout.otherImages[0]

              const mobileSingleMedia = layout.hasFeatured
                ? mobileFeaturedMedia
                : mobileOtherMedia[0]

              return (
                <div class={`content-section ${spacingClass}`}>
                  <figure class="red-background standalone-image">
                    {renderMediaItem(singleMedia, mobileSingleMedia)}
                  </figure>
                </div>
              )
            }

            // 2 media layout - side by side (two columns only)
            if (layout.totalMedia === 2) {
              const mediaItems =
                layout.otherMedia.length > 0 ? layout.otherMedia : layout.otherImages

              return (
                <div class={`content-section ${spacingClass}`}>
                  <div class="two-image-layout gallery">
                    <div class="two-columns">
                      {mediaItems.map(
                        (media: FileWithResolvedAsset | ImageWithResolvedAsset, index: number) => (
                          <figure class="red-background">
                            {renderMediaItem(media, mobileOtherMedia[index])}
                          </figure>
                        ),
                      )}
                    </div>
                  </div>
                </div>
              )
            }

            // 3 media layout - depends on whether there's a featured media
            if (layout.totalMedia === 3) {
              const mediaItems =
                layout.otherMedia.length > 0 ? layout.otherMedia : layout.otherImages

              // If there's a featured media: 2 on top, featured below
              if (layout.hasFeatured) {
                return (
                  <div class={`content-section ${spacingClass}`}>
                    <div class="two-image-layout gallery">
                      <div class="two-columns">
                        {mediaItems.map(
                          (
                            media: FileWithResolvedAsset | ImageWithResolvedAsset,
                            index: number,
                          ) => (
                            <figure class="red-background">
                              {renderMediaItem(media, mobileOtherMedia[index])}
                            </figure>
                          ),
                        )}
                      </div>
                      <figure class="red-background standalone-image-within">
                        {renderMediaItem(featuredMedia, mobileFeaturedMedia)}
                      </figure>
                    </div>
                  </div>
                )
              }
              // If no featured media: 3 in a row
              else {
                return (
                  <div class={`content-section ${spacingClass}`}>
                    <div class="three-image-layout gallery">
                      <div class="three-columns">
                        {mediaItems.map(
                          (
                            media: FileWithResolvedAsset | ImageWithResolvedAsset,
                            index: number,
                          ) => (
                            <figure class="blue-background">
                              {renderMediaItem(media, mobileOtherMedia[index])}
                            </figure>
                          ),
                        )}
                      </div>
                    </div>
                  </div>
                )
              }
            }

            // 4 media layout - 3 on top, featured below
            if (layout.totalMedia === 4) {
              const mediaItems =
                layout.otherMedia.length > 0 ? layout.otherMedia : layout.otherImages

              return (
                <div class={`content-section ${spacingClass}`}>
                  <div class="three-image-layout gallery">
                    <div class="three-columns">
                      {mediaItems.map(
                        (media: FileWithResolvedAsset | ImageWithResolvedAsset, index: number) => (
                          <figure class="blue-background">
                            {renderMediaItem(media, mobileOtherMedia[index])}
                          </figure>
                        ),
                      )}
                    </div>
                    <figure class="red-background standalone-image-within">
                      {renderMediaItem(featuredMedia, mobileFeaturedMedia)}
                    </figure>
                  </div>
                </div>
              )
            }
          }
        })
      }
    </article>

    <aside class="services-container-mobile mobile" aria-label={translations.services}>
      <h2 class="section-titles service-clients-font-size">{translations.services}</h2>
      <ul class="services-list">
        {
          project.services?.map((service, i: number) => {
            const separator = i === (project.services?.length || 0) - 1 ? '' : ',\u00A0'
            return (
              <li class="list-item-mobile">
                <a
                  href={`${projectsBaseUrl}?service=${service.slug?.current || service._id}`}
                  class="service-link"
                >
                  {service.title}
                </a>
                {separator}
              </li>
            )
          })
        }
      </ul>
    </aside>

    {/* Similar projects section */}
    {
      similarProjects && similarProjects.length > 0 && (
        <>
          <hr class="divider-line mobile" aria-hidden="true" />
          <section class="similar-projects" aria-labelledby="similar-projects-title">
            <h2 id="similar-projects-title" class="similar-title">
              {translations.similarProjects}
            </h2>
            <ul class="similar-projects-container">
              {similarProjects.map((similarProject: Project) => {
                const thumbnailMedia = getThumbnailMedia(similarProject)

                // Strip language suffix from slug for non-Catalan locales
                let cleanSlug = similarProject.slug.current
                if (locale === 'es' && cleanSlug.endsWith('-es')) {
                  cleanSlug = cleanSlug.slice(0, -3)
                } else if (locale === 'en' && cleanSlug.endsWith('-en')) {
                  cleanSlug = cleanSlug.slice(0, -3)
                }

                return (
                  <li class="similar-project-item">
                    <ProjectCard
                      title={similarProject.title}
                      thumbnailMedia={thumbnailMedia}
                      slug={`${projectsBaseUrl}/${cleanSlug}`}
                      hoverColor={similarProject.hoverColor?.hex || '#272727'}
                      textHoverColor={similarProject.textHoverColor?.hex || '#fff'}
                      viewProjectText={translations.viewProject}
                      clients={similarProject.clients?.map((client) => client.name).join(', ')}
                      projectId={similarProject._id}
                    />
                  </li>
                )
              })}
            </ul>
          </section>
        </>
      )
    }
  </main>
</BaseLayout>

<script src="@/scripts/magnetic-project-cursor.ts"></script>

<style>
  .main-content {
    margin-block-start: var(--header-height);
    padding-inline: var(--padding-inline);
    padding-block: var(--padding-block);
  }

  .mobile {
    display: none;
  }

  .project-header {
    margin-block-end: var(--padding-block);
  }

  .section-titles {
    font-weight: var(--font-weight-semibold);
  }

  .service-clients-font-size {
    font-size: clamp(1.125rem, 0.995rem + 0.534vi, 1.5rem);
  }

  :global(.hero-image) {
    width: 100vw;
    max-inline-size: none;
    height: 100%;
    object-fit: cover;
    aspect-ratio: 1513/722;
    margin-inline: calc(-1 * var(--padding-inline));
    margin-block-start: var(--padding-block);
  }

  /* Support for video in hero section */
  :global(.hero-image.optimized-video-wrapper) {
    width: 100vw;
    max-inline-size: none;
    height: auto;
    margin-inline: calc(-1 * var(--padding-inline));
    margin-block-start: var(--padding-block);
  }

  :global(.hero-image.optimized-video-wrapper .optimized-video) {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .padding-bottom {
    padding-block-end: 1.75rem;
  }

  .services-container {
    padding-block-start: 0.75rem;
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    list-style: none;
    padding-inline-start: 0;
  }

  .services-container li {
    display: contents;
  }

  .project-copy {
    font-size: clamp(1.125rem, 0.908rem + 0.89vi, 1.75rem);
    line-height: 1.21;
    letter-spacing: -0.02em;
  }

  .two-columns {
    display: flex;
    gap: clamp(1.25rem, 1.033rem + 0.89vi, 1.875rem);
  }

  .three-columns {
    display: flex;
    gap: clamp(1.25rem, 1.033rem + 0.89vi, 1.875rem);
  }

  .red-background {
    background-color: red;
    flex: 1;
    aspect-ratio: 1;
  }

  .blue-background {
    background-color: blue;
    flex: 1;
    aspect-ratio: 217/328;
  }

  .red-background :global(img),
  .blue-background :global(img),
  .standalone-image :global(img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .content-section.with-spacing {
    margin-block-end: clamp(3.375rem, 2.246rem + 4.63vi, 6.625rem);
  }

  /* Override margin when section is before standalone text */
  .content-section.before-text {
    margin-block-end: 0;
  }

  /* Reduced margin when image section is before another image section */
  .content-section.before-image {
    margin-block-end: clamp(1.25rem, 1.033rem + 0.89vi, 1.875rem);
  }

  /* Special margin for standalone text sections */
  .content-section.standalone-text-section {
    margin-block: clamp(3.375rem, 1.291rem + 8.549vi, 9.375rem);
  }

  .standalone-image {
    aspect-ratio: 16/9;
  }

  .standalone-image-within {
    margin-block-start: clamp(1.25rem, 1.033rem + 0.89vi, 1.875rem);
    aspect-ratio: 16/9;
  }

  .standalone-text {
    padding-inline: calc(var(--padding-inline) + 1rem);
  }

  .similar-projects {
    padding-block-start: var(--padding-block);
  }

  .similar-title {
    font-weight: var(--font-weight-semibold);
    font-size: var(--font-size);
    padding-block-end: clamp(1.125rem, 0.127rem + 4.096vi, 4rem);
    text-transform: uppercase;
  }

  .similar-projects-container {
    max-width: 85.3125rem;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(min(100%, 320px), max-content));
    /* justify-content: center; */
    gap: 1.85rem;
    list-style: none;
    padding-inline-start: 0;
    margin-inline: auto;
  }

  .similar-project-item {
    max-inline-size: 27.148rem;
    aspect-ratio: 3/4;
  }

  .similar-project-item article {
    height: 100%;
  }

  /* ProjectCard handles its own styles internally */

  .services-container-mobile {
    padding-block-start: 2.3125rem;
    padding-block-end: 3.5625rem;
  }

  .services-list {
    font-size: 1.125rem;
  }

  .list-item-mobile {
    display: inline-block;
  }

  .service-link {
    color: inherit;
    text-decoration: none;
    transition: opacity 0.2s;
  }

  .service-link:hover {
    opacity: 0.7;
  }

  .divider-line {
    width: 100%;
    height: 1px;
    background-color: #adadad;
    margin: 0rem;
  }

  @media (width < 992px) {
    .content-section.with-spacing {
      margin-block-end: clamp(2rem, 1.5rem + 2vi, 3.5rem);
    }

    .content-section.before-image {
      margin-block-end: clamp(1.25rem, 1.033rem + 0.89vi, 1.875rem);
    }

    .mobile {
      display: block;
    }

    .client-info {
      padding-block-start: var(--padding-block);
    }

    :global(.hero-image) {
      aspect-ratio: 65/59;
      margin-block-start: 2rem;
      padding-block: 0rem;
    }

    :global(.hero-image.optimized-video-wrapper) {
      aspect-ratio: 65/59;
      margin-block-start: 2rem;
      padding-block: 0rem;
    }

    .project-metadata {
      display: none;
    }

    .two-columns,
    .three-columns {
      flex-direction: column;
    }

    .red-background,
    .blue-background {
      aspect-ratio: 362 / 315;
      margin-inline: calc(0.875rem - var(--padding-inline));
    }

    .standalone-text {
      padding-inline: 0rem;
      margin-inline: 0rem;
    }

    .standalone-image-within {
      /* margin-block-start: clamp(0.875rem, 0.75rem + 0.5vi, 1.25rem); */
    }

    .similar-title {
      text-transform: none;
    }

    .similar-projects-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      max-width: none;
      margin-inline: 0;
    }

    .similar-project-item {
      max-inline-size: none;
      aspect-ratio: auto;
    }

    /* Mobile styles handled by ProjectCard component */
  }
</style>
