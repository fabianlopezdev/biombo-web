---
import ProjectesLayout from '@/layouts/ProjectesLayout.astro'
import PillButton from '@/components/shared/PillButton.astro'
import ProjectCard from '@/components/shared/ProjectCard.astro'
import { projectsTranslations, getProjectUrl, type Locale } from '@/shared/translations/projects'

interface Props {
  locale: Locale
  projects: any[] | null
  services: any[] | null
}

const { locale, projects, services } = Astro.props
const t = projectsTranslations[locale]

// Helper function to get image URL
const getImageUrl = (project: any) => {
  // Always prefer thumbnail if it exists, regardless of useSeparateThumbnail flag
  // The flag is only for Sanity UI, not for frontend display logic
  if (project.thumbnailImage?.asset?.url) {
    return project.thumbnailImage.asset.url
  }
  return project.mainImage?.asset?.url || '/projects-mock.jpg'
}

// Helper function to get project slug
const getProjectSlug = (slug: any) => {
  return typeof slug === 'string' ? slug : slug?.current || ''
}
---

<ProjectesLayout pageTitle={t.pageTitle}>
  <section class="projects-filter-container" aria-labelledby="filter-heading">
    <h2 id="filter-heading">{t.filterBy}</h2>
    <nav class="projects-nav-filter" aria-label={t.filterAriaLabel}>
      <div class="projects-filter-wrapper">
        <ul class="projects-filter-list">
          {
            services &&
              services.map((service) => (
                <li>
                  <PillButton
                    text={service.title}
                    data-service={service._id}
                    data-slug={service.slug?.current}
                    class="filter-pill"
                  />
                </li>
              ))
          }
        </ul>
      </div>
      <button class="delete-filters" type="button" aria-label={t.clearFiltersAriaLabel}>
        {t.clearFilters}
      </button>
    </nav>
  </section>
  <section class="projects-container" aria-label={t.projectListAriaLabel}>
    <ul class="projects-grid-container">
      {
        projects && projects.length > 0 ? (
          projects.map((project) => (
            <li
              class="project-item"
              data-services={
                (project.services || project.categories)
                  ?.map((s: any) => {
                    // Handle both dereferenced objects and reference objects
                    return s?._id || s?._ref || ''
                  })
                  .filter(Boolean)
                  .join(',') || ''
              }
            >
              <ProjectCard
                title={project.title}
                imageUrl={getImageUrl(project)}
                slug={getProjectUrl(getProjectSlug(project.slug), locale)}
                hoverColor={project.hoverColor?.hex || '#63b2d5'}
                textHoverColor={project.textHoverColor?.hex || '#ffffff'}
                clients={project.clients?.map((c: any) => c.name).join(', ') || ''}
                viewProjectText={t.viewProject}
                projectId={project._id}
              />
            </li>
          ))
        ) : (
          <li class="no-projects-container">
            <div role="status" aria-live="polite">
              <p class="no-projects">{t.noProjects}</p>
            </div>
          </li>
        )
      }
    </ul>
  </section>
</ProjectesLayout>

<style>
  .projects-filter-container {
    --projects-text-size: clamp(1.125rem, 1.082rem + 0.178vi, 1.25rem);
    padding-block-start: var(--padding-block);
    display: flex;
    align-items: center;
    /* gap: 1.25rem; */
    padding-block-end: clamp(1.625rem, 1.321rem + 1.247vi, 2.5rem);
  }
  h2 {
    font-size: var(--projects-text-size);
    font-weight: var(--font-weight-light);
    flex-shrink: 0;
    white-space: nowrap;
  }

  .projects-nav-filter {
    display: flex;
    align-items: center;
    /* gap: 1.25rem; */
    flex: 1;
    position: relative;
    /* padding-inline-start: 1rem; Slightly more padding to push first pill past the 3% fade */
    mask-image: linear-gradient(to right, transparent 0%, black 3%, black 90%, transparent 100%);
    -webkit-mask-image: linear-gradient(
      to right,
      transparent 0%,
      black 3%,
      black 90%,
      transparent 100%
    );
  }

  .projects-filter-wrapper {
    flex: 1;
    overflow-x: auto;
    overflow-y: hidden;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    position: relative;
    padding-inline-start: 2rem; /* Slightly more padding to push first pill past the 3% fade */
    /* Add mask for right fade only */
    mask-image: linear-gradient(to right, black 0%, black 90%, transparent 100%);
    -webkit-mask-image: linear-gradient(to right, black 0%, black 90%, transparent 100%);
  }

  .projects-filter-wrapper::-webkit-scrollbar {
    display: none;
  }

  .projects-filter-list {
    list-style: none;
    display: flex;
    flex-wrap: nowrap;
    gap: clamp(0.625rem, 0.582rem + 0.178vi, 0.75rem);
    cursor: grab;
    padding-inline-end: 2rem; /* Add padding here instead, on the list itself */
  }

  /* Visual feedback for filter pill clicks */
  .filter-pill {
    transition:
      transform 0.1s ease-out,
      background-color 0.3s ease;
  }

  .filter-pill:active {
    transform: scale(0.99);
  }

  .filter-pill.active {
    background-color: var(--color-secondary);
    color: var(--color-primary);
  }

  .delete-filters {
    font-size: var(--projects-text-size);
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
    position: relative;
    z-index: 2;
    flex-shrink: 0;
    padding-inline-start: 1.5rem; /* Add padding to create space from scrolling pills */
    background: linear-gradient(
      to right,
      transparent 0%,
      var(--color-primary, white) 20%
    ); /* Gradient to blend with fade */
  }

  .projects-grid-container {
    max-width: 85.3125rem;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(min(100%, 320px), max-content));
    justify-content: center;
    /* align-content: center; */
    /* margin-inline: auto; */
    gap: 1.85rem;
  }

  .project-item {
    max-inline-size: 27.148rem;
    aspect-ratio: 3/4;
    /* display: block; Override default list-item display to fix grid layout */
    /* height: clamp(25.375rem, -2.75rem + 41.705vi, 36.688rem); */
  }

  .project-item article {
    height: 100%; /* Pass height to ProjectCard through article element */
  }

  @media (width < 992px) {
    .projects-filter-container {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.125rem;
    }

    .project-item {
      aspect-ratio: none;
      height: auto; /* Reset height on mobile to prevent overlap */
    }

    /* On mobile, the nav becomes the scrollable container */
    .projects-nav-filter {
      overflow-x: auto;
      overflow-y: hidden;
      -webkit-overflow-scrolling: touch;
      scrollbar-width: none;
      margin-inline: calc(-1 * var(--padding-inline));
      width: 100vw;
      display: flex;
      align-items: center;
      gap: clamp(0.625rem, 0.582rem + 0.178vi, 0.75rem);
      padding-block: 4px;
    }

    .projects-nav-filter::-webkit-scrollbar {
      display: none;
    }

    /* Reset wrapper styles on mobile */
    .projects-filter-wrapper {
      overflow: visible;
      flex: none;
      mask-image: none;
      -webkit-mask-image: none;
    }

    .projects-filter-list {
      flex-wrap: nowrap;
      padding-inline-start: var(--padding-inline);
      padding-inline-end: 0; /* Remove the desktop padding */
    }

    .projects-filter-list:active {
      cursor: grabbing;
    }

    /* On mobile, delete button goes at the end */
    .delete-filters {
      margin-inline-start: 0;
      flex-shrink: 0;
      padding-inline-start: 1rem;
      padding-inline-end: var(--padding-inline);
      background: none; /* Remove desktop gradient */
    }
  }
</style>

<script src="@/scripts/pages/homepage/customCursor.ts"></script>
<script is:inline define:vars={{ locale, t }}>
  // Service filtering functionality
  const filterPills = document.querySelectorAll('.filter-pill')
  const projectItems = document.querySelectorAll('.project-item')
  const deleteFiltersBtn = document.querySelector('.delete-filters')

  // Track active filters using a Set for O(1) lookup efficiency
  window.activeFilters = new Set()

  // Check for service parameter in URL on page load
  window.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search)
    const serviceParam = urlParams.get('service')

    if (serviceParam) {
      // Try to find pill by slug first (check data-slug), then fallback to ID (data-service)
      let pill = document.querySelector(`[data-slug="${serviceParam}"]`)
      if (!pill) {
        // Fallback to ID-based search for backward compatibility
        pill = document.querySelector(`[data-service="${serviceParam}"]`)
      }
      if (pill) {
        // Simulate a click to activate the filter
        pill.click()
      }
    }
  })

  // Add keyboard support and click handlers to filter pills
  filterPills.forEach((pill) => {
    pill.setAttribute('tabindex', '0')
    pill.setAttribute('aria-pressed', 'false')

    // Keyboard support
    pill.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault()
        pill.click()
      }
    })

    // This click handler is now handled in the drag-aware section below
    // to prevent filter toggle after dragging
  })

  // Create live region for screen reader announcements
  const liveRegion = document.createElement('div')
  liveRegion.setAttribute('role', 'status')
  liveRegion.setAttribute('aria-live', 'polite')
  liveRegion.setAttribute('aria-atomic', 'true')
  liveRegion.classList.add('sr-only')
  document.body.appendChild(liveRegion)

  // Function to announce filter results
  window.announceFilterResults = function () {
    const visibleCount = [...projectItems].filter((item) => item.style.display !== 'none').length
    const filterCount = window.activeFilters.size

    if (filterCount > 0) {
      liveRegion.textContent = t.screenReaderAnnouncements.filtersActive(filterCount, visibleCount)
    } else {
      liveRegion.textContent = t.screenReaderAnnouncements.allProjectsShowing(visibleCount)
    }
  }

  // Delete filters button
  if (deleteFiltersBtn) {
    deleteFiltersBtn.addEventListener('click', () => {
      // Clear all filters
      filterPills.forEach((p) => {
        p.classList.remove('active')
        p.setAttribute('aria-pressed', 'false')
      })
      window.activeFilters.clear()

      // Show all projects
      projectItems.forEach((item) => {
        item.style.display = 'block'
      })

      // Announce that filters have been cleared
      window.announceFilterResults()
    })
  }
</script>

<script is:inline>
  // Determine which element to make draggable based on viewport
  const isMobile = window.matchMedia('(max-width: 991px)').matches
  const scrollableElement = isMobile
    ? document.querySelector('.projects-nav-filter')
    : document.querySelector('.projects-filter-wrapper')

  if (scrollableElement) {
    let isDragging = false
    let startX
    let startY
    let scrollLeft
    const dragThreshold = 6 // pixels - minimum movement to consider it a drag

    scrollableElement.addEventListener('mousedown', (e) => {
      startX = e.pageX
      startY = e.pageY
      scrollLeft = scrollableElement.scrollLeft
      isDragging = false
      scrollableElement.style.cursor = 'grab'
    })

    scrollableElement.addEventListener('mouseleave', () => {
      startX = null
      startY = null
      isDragging = false
      scrollableElement.style.cursor = 'grab'
    })

    scrollableElement.addEventListener('mouseup', () => {
      startX = null
      startY = null
      isDragging = false
      scrollableElement.style.cursor = 'grab'
    })

    scrollableElement.addEventListener('mousemove', (e) => {
      if (startX === null || startX === undefined) return

      const diffX = Math.abs(e.pageX - startX)
      const diffY = Math.abs(e.pageY - startY)

      // Start dragging only after moving beyond threshold
      if (diffX > dragThreshold || diffY > dragThreshold) {
        if (!isDragging) {
          isDragging = true
          scrollableElement.style.cursor = 'grabbing'
        }

        e.preventDefault()
        const walk = (e.pageX - startX) * 2 // Scroll speed multiplier
        scrollableElement.scrollLeft = scrollLeft - walk
      }
    })

    // Prevent pill clicks only when actually dragging
    const pills = scrollableElement.querySelectorAll('.filter-pill')
    pills.forEach((pill) => {
      let pillStartX
      let pillStartY

      pill.addEventListener('mousedown', (e) => {
        pillStartX = e.pageX
        pillStartY = e.pageY
      })

      pill.addEventListener('click', (e) => {
        // Check if we moved beyond threshold during this click
        const movedX = Math.abs(e.pageX - pillStartX)
        const movedY = Math.abs(e.pageY - pillStartY)

        if (isDragging || movedX > dragThreshold || movedY > dragThreshold) {
          e.preventDefault()
          e.stopPropagation()
          return // Don't process filter toggle after dragging
        }

        // Process filter toggle only for real clicks
        const serviceId = pill.getAttribute('data-service')
        if (!serviceId) return

        // Toggle active state
        if (pill.classList.contains('active')) {
          pill.classList.remove('active')
          pill.setAttribute('aria-pressed', 'false')
          window.activeFilters.delete(serviceId)
        } else {
          pill.classList.add('active')
          pill.setAttribute('aria-pressed', 'true')
          window.activeFilters.add(serviceId)
        }

        // Filter projects efficiently
        const projectItems = document.querySelectorAll('.project-item')
        projectItems.forEach((item) => {
          if (window.activeFilters.size === 0) {
            // No filters active, show all
            item.style.display = 'block'
          } else {
            // Check if project has all of the active service filters
            const itemServicesStr = item.getAttribute('data-services') || ''
            const itemServices = itemServicesStr ? itemServicesStr.split(',').filter((s) => s) : []

            // Using .every() to check that project has ALL selected filters
            const hasAllActiveServices = [...window.activeFilters].every((filter) =>
              itemServices.includes(filter),
            )
            item.style.display = hasAllActiveServices ? 'block' : 'none'
          }
        })

        // Announce filter results to screen readers
        window.announceFilterResults()
      })
    })

    // Set initial cursor
    scrollableElement.style.cursor = 'grab'

    // Handle window resize to update draggable element
    window.addEventListener('resize', () => {
      const newIsMobile = window.matchMedia('(max-width: 991px)').matches
      if (newIsMobile !== isMobile) {
        location.reload() // Simple reload to re-initialize with correct element
      }
    })
  }
</script>
