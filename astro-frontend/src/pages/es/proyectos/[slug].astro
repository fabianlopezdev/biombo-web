---
import ProjectLayout from '@/layouts/ProjectLayout.astro'
import PillButton from '@/components/shared/PillButton.astro'
import TwoColumnLayout from '@/components/shared/TwoColumnLayout.astro'
import ProjectCard from '@/components/shared/ProjectCard.astro'
import { portableTextToHtml } from '@/shared/lib/sanity/utils/portableTextToHtml'
import {
  fetchProjectBySlug,
  fetchProjectsByLocale,
} from '@/shared/lib/sanity/queries/projectQueries'

export const prerender = true

export async function getStaticPaths() {
  // Only fetch Spanish projects for this route
  const projectsEs = (await fetchProjectsByLocale('es')) || []

  const paths = projectsEs.map((project) => ({
    params: { slug: project.slug.current },
    props: {
      projectSlug: project.slug.current,
    },
  }))

  return paths
}

const { projectSlug } = Astro.props
const locale = 'es' // Always Spanish for this route

const project = await fetchProjectBySlug(projectSlug, locale)

if (!project) {
  return Astro.redirect('/404')
}

// Helper function to get similar projects based on shared services
function getSimilarProjects(currentProject: any, allProjects: any[], limit: number = 4) {
  // Create Set of current project's service IDs for O(1) lookup
  const currentServiceIds = new Set(currentProject.services?.map((s: any) => s._id) || [])

  if (currentServiceIds.size === 0) {
    // No services to compare, return random projects
    return allProjects.filter((p) => p._id !== currentProject._id).slice(0, limit)
  }

  // Calculate shared services for each project
  const projectsWithScore = allProjects
    .filter((p) => p._id !== currentProject._id) // Exclude current
    .map((project) => {
      const sharedCount =
        project.services?.filter((service: any) => currentServiceIds.has(service._id)).length || 0

      return { project, sharedCount }
    })
    .filter((item) => item.sharedCount > 0) // Only projects with shared services

  // Sort by: 1) shared services (desc), 2) title (asc)
  projectsWithScore.sort((a, b) => {
    if (a.sharedCount !== b.sharedCount) {
      return b.sharedCount - a.sharedCount // More services first
    }
    // Same service count, sort alphabetically
    return a.project.title.localeCompare(b.project.title)
  })

  // Return just the projects (not the scores)
  return projectsWithScore.slice(0, limit).map((item) => item.project)
}

// Fetch all projects in the same locale for similarity calculation
const allProjects = await fetchProjectsByLocale(locale)

// Calculate similar projects based on shared services
const similarProjects = allProjects ? getSimilarProjects(project, allProjects, 4) : null

// Use centralized portable text converter

// Helper to get image URL
const getImageUrl = (image: any) => {
  if (!image?.asset) return ''
  return image.asset.url || ''
}

// Helper to determine image section layout
const getImageSectionLayout = (section: any) => {
  const hasFeatured = section.featuredImage?.asset
  const otherCount = section.otherImages?.length || 0
  const totalImages = (hasFeatured ? 1 : 0) + otherCount

  return {
    totalImages,
    hasFeatured,
    otherImages: section.otherImages || [],
  }
}
---

<ProjectLayout pageTitle={project.title}>
  <aside class="client-info mobile" aria-label="Información del cliente">
    <h2 class="section-titles service-clients-font-size">Cliente:</h2>
    <p class="service-clients-font-size">
      {project.clients?.map((client: any) => client.name).join(', ') || 'N/A'}
    </p>
  </aside>

  <header class="project-header">
    <figure class="hero-figure">
      <img
        class="hero-image"
        src={getImageUrl(project.mainImage)}
        alt={`Imagen principal del proyecto ${project.title}`}
      />
    </figure>
  </header>

  <article class="project-content">
    <TwoColumnLayout>
      <aside slot="first-column" class="project-metadata" aria-label="Detalles del proyecto">
        <div class="client-section">
          <h2 class="section-titles service-clients-font-size">Cliente:</h2>
          <p class="padding-bottom service-clients-font-size">
            {project.clients?.map((client: any) => client.name).join(', ') || 'N/A'}
          </p>
        </div>
        <div class="services-section">
          <h2 class="section-titles service-clients-font-size">Servicios:</h2>
          <ul class="services-container">
            {
              project.services?.map((service: any) => (
                <li>
                  <PillButton text={service.title} />
                </li>
              ))
            }
          </ul>
        </div>
      </aside>
      <div slot="second-column" class="project-description">
        {
          project.mainText && (
            <div class="project-copy" set:html={portableTextToHtml(project.mainText)} />
          )
        }
      </div>
    </TwoColumnLayout>

    {/* Dynamic content sections */}
    {
      project.contentSections?.map((section: any, index: number) => {
        const isLastSection = index === project.contentSections.length - 1
        const nextSection = !isLastSection ? project.contentSections[index + 1] : null
        const isBeforeText = nextSection && nextSection._type === 'textBlock'

        if (section._type === 'textBlock') {
          return (
            <div class="content-section standalone-text-section">
              <blockquote
                class="standalone-text project-copy highlight-quote"
                set:html={portableTextToHtml(section.text)}
              />
            </div>
          )
        }

        if (section._type === 'imageSection') {
          const layout = getImageSectionLayout(section)
          const spacingClass = !isLastSection ? (isBeforeText ? 'before-text' : 'with-spacing') : ''

          // 1 image layout - full width (like the standalone image)
          if (layout.totalImages === 1) {
            return (
              <div class={`content-section ${spacingClass}`}>
                <figure class="red-background standalone-image">
                  <img
                    src={getImageUrl(
                      layout.hasFeatured ? section.featuredImage : layout.otherImages[0],
                    )}
                    alt="Imagen destacada del proyecto"
                    loading="lazy"
                  />
                </figure>
              </div>
            )
          }

          // 2 images layout - side by side (two columns only)
          if (layout.totalImages === 2) {
            return (
              <div class={`content-section ${spacingClass}`}>
                <div class="two-image-layout gallery">
                  <div class="two-columns">
                    {layout.otherImages.map((img: any) => (
                      <figure class="red-background">
                        <img src={getImageUrl(img)} alt="Imagen del proyecto" loading="lazy" />
                      </figure>
                    ))}
                  </div>
                </div>
              </div>
            )
          }

          // 3 images layout - depends on whether there's a featured image
          if (layout.totalImages === 3) {
            // If there's a featured image: 2 on top, featured below
            if (layout.hasFeatured) {
              return (
                <div class={`content-section ${spacingClass}`}>
                  <div class="two-image-layout gallery">
                    <div class="two-columns">
                      {layout.otherImages.map((img: any) => (
                        <figure class="red-background">
                          <img src={getImageUrl(img)} alt="Imagen del proyecto" loading="lazy" />
                        </figure>
                      ))}
                    </div>
                    <figure class="red-background standalone-image-within">
                      <img
                        src={getImageUrl(section.featuredImage)}
                        alt="Imagen destacada del proyecto"
                        loading="lazy"
                      />
                    </figure>
                  </div>
                </div>
              )
            }
            // If no featured image: 3 in a row
            else {
              return (
                <div class={`content-section ${spacingClass}`}>
                  <div class="three-image-layout gallery">
                    <div class="three-columns">
                      {layout.otherImages.map((img: any) => (
                        <figure class="blue-background">
                          <img
                            src={getImageUrl(img)}
                            alt="Aplicación del proyecto"
                            loading="lazy"
                          />
                        </figure>
                      ))}
                    </div>
                  </div>
                </div>
              )
            }
          }

          // 4 images layout - 3 on top, featured below
          if (layout.totalImages === 4) {
            return (
              <div class={`content-section ${spacingClass}`}>
                <div class="three-image-layout gallery">
                  <div class="three-columns">
                    {layout.otherImages.map((img: any) => (
                      <figure class="blue-background">
                        <img src={getImageUrl(img)} alt="Aplicación del proyecto" loading="lazy" />
                      </figure>
                    ))}
                  </div>
                  <figure class="red-background standalone-image-within">
                    <img
                      src={getImageUrl(section.featuredImage)}
                      alt="Imagen final del proyecto"
                      loading="lazy"
                    />
                  </figure>
                </div>
              </div>
            )
          }
        }
      })
    }
  </article>

  <aside class="services-container-mobile mobile" aria-label="Lista de servicios">
    <h2 class="section-titles service-clients-font-size">Servicios:</h2>
    <ul class="services-list">
      {
        project.services?.map((service: any, i: number) => {
          const separator = i === project.services.length - 1 ? '' : ',\u00A0'
          return (
            <li class="list-item-mobile">
              {service.title}
              {separator}
            </li>
          )
        })
      }
    </ul>
  </aside>

  <hr class="divider-line mobile" aria-hidden="true" />

  {/* Similar projects section */}
  {
    similarProjects && similarProjects.length > 0 && (
      <section class="similar-projects" aria-labelledby="similar-projects-title">
        <h2 id="similar-projects-title" class="similar-title">
          Proyectos similares
        </h2>
        <ul class="similar-projects-container">
          {similarProjects.map((similarProject: any) => {
            const thumbnailImage =
              similarProject.useSeparateThumbnail && similarProject.thumbnailImage
                ? similarProject.thumbnailImage
                : similarProject.mainImage
            return (
              <li class="similar-project-item">
                <ProjectCard
                  title={similarProject.title}
                  imageUrl={getImageUrl(thumbnailImage)}
                  slug={`/es/proyectos/${similarProject.slug.current}`}
                  hoverColor={similarProject.hoverColor?.hex || '#272727'}
                  textHoverColor={similarProject.textHoverColor?.hex || '#fff'}
                  viewProjectText="Ver proyecto"
                  clients={similarProject.clients?.map((client: any) => client.name).join(', ')}
                  projectId={similarProject._id}
                />
              </li>
            )
          })}
        </ul>
      </section>
    )
  }
</ProjectLayout>

<script src="@/scripts/pages/homepage/customCursor.ts"></script>

<style>
  .mobile {
    display: none;
  }

  .section-titles {
    font-weight: var(--font-weight-semibold);
  }

  .service-clients-font-size {
    font-size: clamp(1.125rem, 0.995rem + 0.534vi, 1.5rem);
  }

  .hero-image {
    width: 100vw;
    max-inline-size: none;
    height: 100%;
    object-fit: cover;
    aspect-ratio: 1513/722;
    margin-inline: calc(-1 * var(--padding-inline));
    padding-block-start: var(--padding-block);
  }

  .padding-bottom {
    padding-block-end: 1.75rem;
  }

  .services-container {
    padding-block-start: 0.75rem;
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    list-style: none;
    padding-inline-start: 0;
  }

  .services-container li {
    display: contents;
  }

  .project-copy {
    font-size: clamp(1.125rem, 0.908rem + 0.89vi, 1.75rem);
    line-height: 1.21;
  }

  .two-columns {
    display: flex;
    gap: clamp(1.25rem, 1.033rem + 0.89vi, 1.875rem);
  }

  .three-columns {
    display: flex;
    gap: clamp(1.25rem, 1.033rem + 0.89vi, 1.875rem);
  }

  .red-background {
    background-color: red;
    flex: 1;
    aspect-ratio: 1;
  }

  .blue-background {
    background-color: blue;
    flex: 1;
    aspect-ratio: 217/328;
  }

  .red-background img,
  .blue-background img,
  .standalone-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .content-section.with-spacing {
    margin-block-end: clamp(3.375rem, 2.246rem + 4.63vi, 6.625rem);
  }

  /* Override margin when section is before standalone text */
  .content-section.before-text {
    margin-block-end: 0;
  }

  /* Special margin for standalone text sections */
  .content-section.standalone-text-section {
    margin-block: clamp(3.375rem, 1.291rem + 8.549vi, 9.375rem);
  }

  .standalone-image {
    aspect-ratio: 16/9;
  }

  .standalone-image-within {
    margin-block-start: clamp(1.25rem, 1.033rem + 0.89vi, 1.875rem);
    aspect-ratio: 16/9;
  }

  .standalone-text {
    padding-inline: calc(var(--padding-inline) + 2rem);
  }

  .similar-projects {
    padding-block-start: var(--padding-block);
  }

  .similar-title {
    font-weight: var(--font-weight-semibold);
    font-size: var(--font-size);
    padding-block-end: clamp(1.125rem, 0.127rem + 4.096vi, 4rem);
    text-transform: uppercase;
  }

  .similar-projects-container {
    max-width: 85.3125rem;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(min(100%, 320px), max-content));
    justify-content: center;
    gap: 1.85rem;
    list-style: none;
    padding-inline-start: 0;
    margin-inline: auto;
  }

  .similar-project-item {
    max-inline-size: 27.148rem;
    aspect-ratio: 3/4;
  }

  .similar-project-item article {
    height: 100%;
  }

  /* ProjectCard handles its own styles internally */

  .services-container-mobile {
    padding-block-start: 2.3125rem;
    padding-block-end: 3.5625rem;
  }

  .services-list {
    font-size: 1.125rem;
  }

  .list-item-mobile {
    display: inline-block;
  }

  .divider-line {
    width: 100%;
    height: 1px;
    background-color: #adadad;
  }

  @media (width < 992px) {
    .content-section.with-spacing {
      margin-block-end: clamp(2rem, 1.5rem + 2vi, 3.5rem);
    }

    .mobile {
      display: block;
    }

    .client-info {
      padding-block-start: var(--padding-block);
    }

    .hero-image {
      aspect-ratio: 65/59;
      margin-block-start: 2rem;
      padding-block: 0rem;
    }

    .project-metadata {
      display: none;
    }

    .two-columns,
    .three-columns {
      flex-direction: column;
    }

    .red-background,
    .blue-background {
      aspect-ratio: 362 / 315;
      margin-inline: calc(0.875rem - var(--padding-inline));
    }

    .standalone-text {
      padding-inline: 0rem;
    }

    .standalone-image-within {
      margin-block-start: clamp(0.875rem, 0.75rem + 0.5vi, 1.25rem);
    }

    .similar-title {
      text-transform: none;
    }

    .similar-projects-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      max-width: none;
      margin-inline: 0;
    }

    .similar-project-item {
      max-inline-size: none;
      aspect-ratio: auto;
    }

    /* Mobile styles handled by ProjectCard component */
  }
</style>
